<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>myBlog</title>
  
  <subtitle>rich ? doSomeLike() : doSomeNeed()</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-08-19T09:20:32.757Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>web性能优化</title>
    <link href="http://yoursite.com/2021/08/19/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2021/08/19/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
    <published>2021-08-19T08:04:38.000Z</published>
    <updated>2021-08-19T09:20:32.757Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是一篇本人对 <code>web性能优化</code> 的学习和理解。</p></blockquote><ol><li><a href="#1-DNS%E4%B8%8ETCP">DNS与TCP</a></li><li><a href="#2-HTTP">HTTP</a></li><li><a href="#3-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86">浏览器渲染原理</a></li><li><a href="#4-%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7">相关工具</a></li><li><a href="#5-%E4%BB%80%E4%B9%88%E6%98%AF%E8%BF%9E%E6%8E%A5%E5%A4%8D%E7%94%A8">什么是连接复用</a></li><li><a href="#6-%E4%BB%80%E4%B9%88%E6%98%AF%E5%A4%9A%E8%B7%AF%E7%94%B1%E5%A4%8D%E7%94%A8">什么是多路由复用</a></li><li><a href="#7-CookieFree%E4%B8%8ECDN">CookieFree与CDN</a></li><li><a href="#8-%E7%BC%93%E5%AD%98%E4%B8%8E%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86">缓存与内容协商</a></li><li><a href="#9-%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96">代码优化</a></li></ol><h1 id="1-DNS与TCP"><a href="#1-DNS与TCP" class="headerlink" title="1.DNS与TCP"></a>1.DNS与TCP</h1><ol><li><a href="#1-1DNS">DNS</a></li><li><a href="#1-2TCP">TCP</a></li></ol><h2 id="1-1DNS"><a href="#1-1DNS" class="headerlink" title="1.1DNS"></a>1.1DNS</h2><h2 id="1-2TCP"><a href="#1-2TCP" class="headerlink" title="1.2TCP"></a>1.2TCP</h2><h1 id="2-HTTP"><a href="#2-HTTP" class="headerlink" title="2.HTTP"></a>2.HTTP</h1><h1 id="3-浏览器渲染原理"><a href="#3-浏览器渲染原理" class="headerlink" title="3.浏览器渲染原理"></a>3.浏览器渲染原理</h1><h1 id="4-相关工具"><a href="#4-相关工具" class="headerlink" title="4.相关工具"></a>4.相关工具</h1><h1 id="5-什么是连接复用"><a href="#5-什么是连接复用" class="headerlink" title="5.什么是连接复用"></a>5.什么是连接复用</h1><h1 id="6-什么是多路由复用"><a href="#6-什么是多路由复用" class="headerlink" title="6.什么是多路由复用"></a>6.什么是多路由复用</h1><h1 id="7-CookieFree与CDN"><a href="#7-CookieFree与CDN" class="headerlink" title="7.CookieFree与CDN"></a>7.CookieFree与CDN</h1><h1 id="8-缓存与内容协商"><a href="#8-缓存与内容协商" class="headerlink" title="8.缓存与内容协商"></a>8.缓存与内容协商</h1><h1 id="9-代码优化"><a href="#9-代码优化" class="headerlink" title="9.代码优化"></a>9.代码优化</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这是一篇本人对 &lt;code&gt;web性能优化&lt;/code&gt; 的学习和理解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#1-DNS%E4%B8%8ETCP&quot;&gt;DNS与TCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
    <category term="浏览器" scheme="http://yoursite.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>React Hooks 学习&amp;总结</title>
    <link href="http://yoursite.com/2021/03/13/React%20Hooks%20%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2021/03/13/React%20Hooks%20%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-03-13T08:18:32.000Z</published>
    <updated>2021-06-24T07:17:28.515Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是一篇关于本人 <code>React Hooks</code> 学习的总结文章，因为有一定 <code>Vue 3</code> 的编写经验，所以学起来不是那么吃力，下面一些总结仅代表个人看法。</p></blockquote><p><code>React Hooks</code> 对应 <code>API</code></p><ol><li><a href="#1-useState">useState</a></li><li><a href="#2-useReducer">useReducer</a></li><li><a href="#3-useContext">useContext</a></li><li><a href="#4-useEffect%E3%80%81useLayoutEffect">useEffect、useLayoutEffect</a></li><li><a href="#5-useMemo%E3%80%81useCallback">useMemo、useCallback</a></li><li><a href="#6-useRef%E3%80%81forwardRef%E3%80%81useImperativeHandle">useRef、forwardRef、useImperativeHandle</a></li><li><a href="#7-%E8%87%AA%E5%AE%9A%E4%B9%89hook">自定义hook</a></li><li><a href="#8-stale-closure">stale-closure</a></li></ol><h1 id="1-useState"><a href="#1-useState" class="headerlink" title="1.useState"></a>1.useState</h1><ul><li><a href="#1-1useState%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95">1.1useState基础用法</a></li><li><a href="#1-2useState%E4%B8%8D%E5%8F%AF%E5%B1%80%E9%83%A8%E6%9B%B4%E6%96%B0">1.2useState不可局部更新</a></li><li><a href="#1-3useState%E5%9C%B0%E5%9D%80%E9%9C%80%E8%A6%81%E5%8F%98%E6%8D%A2">1.3useState地址需要变换</a></li><li><a href="#1-4useState%E5%8F%AF%E4%BB%A5%E6%8E%A5%E5%8F%97%E5%87%BD%E6%95%B0">1.4useState可以接受函数</a></li><li><a href="#1-5setState%E5%8F%AF%E4%BB%A5%E6%8E%A5%E5%8F%97%E5%87%BD%E6%95%B0">1.5setState可以接受函数</a></li></ul><h2 id="1-1useState基础用法"><a href="#1-1useState基础用法" class="headerlink" title="1.1useState基础用法"></a>1.1useState基础用法</h2><blockquote><p>用于变量声明，形式大致如下：</p></blockquote><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String、Number、Boolean</span></span><br><span class="line"><span class="keyword">const</span> [s, setS] = React.useState(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> [n, setN] = React.useState(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> [b, setB] = React.useState(<span class="literal">false</span>)</span><br><span class="line"><span class="comment">// Object、Array</span></span><br><span class="line"><span class="keyword">const</span> [user, setUser] = React.useState(&#123; <span class="attr">name</span>: <span class="string">&#x27;xxx&#x27;</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> [array, setArray] = React.useState([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><h2 id="1-2useState不可局部更新"><a href="#1-2useState不可局部更新" class="headerlink" title="1.2useState不可局部更新"></a>1.2useState不可局部更新</h2><blockquote><p>如果state是一个对象,能否部分setState?答案是不行的，，演示如下 : <a href="https://idlki.csb.app/">useState-DEMO1</a></p></blockquote><p>具体代码如下 :</p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = useState(&#123; <span class="attr">name</span>: <span class="string">&#x27;Howard&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br><span class="line">  <span class="comment">// 由此可得出结论，每次点击事件会造成重新渲染页面，但每次的user对象却是一个新的对象。</span></span><br><span class="line">  <span class="built_in">console</span>.log(user)</span><br><span class="line">  <span class="keyword">const</span> onClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// error</span></span><br><span class="line">    <span class="comment">// 这种方式会丢失 age 属性</span></span><br><span class="line">    setUser(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// solution</span></span><br><span class="line">    <span class="comment">// setUser(&#123;</span></span><br><span class="line">    <span class="comment">//   ...state,</span></span><br><span class="line">    <span class="comment">//   name:&#x27;John&#x27;</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;user.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;user.age&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>Click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootElement = <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, rootElement);</span><br></pre></td></tr></table></figure><h2 id="1-3useState地址需要变换"><a href="#1-3useState地址需要变换" class="headerlink" title="1.3useState地址需要变换"></a>1.3useState地址需要变换</h2><blockquote><p>如果state是一个对象，setState(state)如果state的地址不变，react就会认为数据没有变换，因此页面不会重新渲染对应值，演示如下 : <a href="https://cqw5l.csb.app/">useState-DEMO2</a></p></blockquote><p>具体代码如下 :</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = useState(&#123; <span class="attr">name</span>: <span class="string">&#x27;Howard&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br><span class="line">  <span class="keyword">const</span> onClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// error</span></span><br><span class="line">    <span class="comment">// 这种方式不会重新渲染</span></span><br><span class="line">    user.name = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    user.age = <span class="number">11</span></span><br><span class="line">    <span class="built_in">console</span>.log(user)</span><br><span class="line">    setUser(user)</span><br><span class="line">    <span class="comment">// solution</span></span><br><span class="line">    <span class="comment">// setUser(()=&gt;(&#123; name:&#x27;xxx&#x27;,age:11&#125;))</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;user.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;user.age&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>Click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootElement = <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, rootElement);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-4useState可以接受函数"><a href="#1-4useState可以接受函数" class="headerlink" title="1.4useState可以接受函数"></a>1.4useState可以接受函数</h2><blockquote><p>useState 是可以接受如下写法的，演示如下 : <a href="https://i72og.csb.app/">useState-DEMO3</a></p></blockquote><p>具体代码如下 :</p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以初始值提出到全局作用域</span></span><br><span class="line"><span class="keyword">const</span> intial = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Howard&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 以函数形式传入并return出初始值</span></span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = useState(<span class="function">() =&gt;</span> intial);</span><br><span class="line">  <span class="keyword">const</span> onClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setUser(&#123;</span><br><span class="line">      ...user,</span><br><span class="line">      <span class="attr">hobby</span>: <span class="string">&quot;play video game&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>name : &#123;user.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>age : &#123;user.age&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>hobby : &#123;user.hobby || &quot;click show result&quot;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>Click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootElement = <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, rootElement);</span><br></pre></td></tr></table></figure><h2 id="1-5-set-State可以接受函数"><a href="#1-5-set-State可以接受函数" class="headerlink" title="1.5**set**State可以接受函数"></a>1.5**<code>set</code>**State可以接受函数</h2><blockquote><p>如果想对同一个值操作两次，可以使用如下方法，演示如下 : <a href="https://inu5u.csb.app/">setState-DEMO1</a></p></blockquote><p>具体代码如下 :</p><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [n, setN] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> onClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 该操作 n 不能加 2</span></span><br><span class="line">    setN(n + <span class="number">1</span>)</span><br><span class="line">    setN(n + <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// solution</span></span><br><span class="line">    <span class="comment">// 通过函数形式传入即可</span></span><br><span class="line">    <span class="comment">// setN(i =&gt; i + 1);</span></span><br><span class="line">    <span class="comment">// setN(x =&gt; x + 1);</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>n: &#123;n&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>+2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootElement = <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, rootElement);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-useReducer"><a href="#2-useReducer" class="headerlink" title="2.useReducer"></a>2.useReducer</h1><blockquote><p>总的来说，useReducer 是 useState 的复杂版，演示如下 : <a href="https://r8i5h.csb.app/">useReducer-DEMO1</a></p></blockquote><p>具体代码如下 :</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// step1 : 创建初始值</span></span><br><span class="line"><span class="keyword">const</span> initial = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;lzy&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// step 2 : 创建所有操作</span></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;add&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">age</span>: state.age + action.number &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;multi&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">age</span>: state.age * action.number &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;unknown type&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// step3 : 将初始值 initial 和 操作 reducer 传给 useReducer</span></span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = React.useReducer(reducer, initial);</span><br><span class="line">  <span class="keyword">const</span> &#123; age, name &#125; = state;</span><br><span class="line">  <span class="keyword">const</span> onClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// step4 : 调用写(&#123;type:&#x27;action&#x27;&#125;)方法</span></span><br><span class="line">    <span class="comment">// dispatch 作为事件分发 给reducer提供方法并在其内部操作</span></span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: <span class="string">&quot;add&quot;</span>, <span class="attr">number</span>: <span class="number">1</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> onClick2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: <span class="string">&quot;add&quot;</span>, <span class="attr">number</span>: <span class="number">2</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> onClick3 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: <span class="string">&quot;multi&quot;</span>, <span class="attr">number</span>: <span class="number">2</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>name: &#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>age: &#123;age&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick2&#125;</span>&gt;</span>+2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick3&#125;</span>&gt;</span>*2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootElement = <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, rootElement);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-useContext"><a href="#3-useContext" class="headerlink" title="3.useContext"></a>3.useContext</h1><blockquote><p>useContext 就是 上下文，<em>注意</em>：useContext 不是响应式的在一个模块将 Context内 的值改变，另一个模块不会感知变化。具体演示如下 : <a href="https://tt5im.csb.app/">useContext-DEMO1</a></p></blockquote><blockquote><p>比较类似 vue 的 provide/inject ，通过 provide 一个对象/组件，在任意后代组件内部 inject 即可拿到provide对象的实例。</p></blockquote><p>具体代码如下 :</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; createContext, useState, useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// step 1 : 使用 createContext(initial) 创建上下文</span></span><br><span class="line"><span class="keyword">const</span> Context = createContext(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;App 执行了&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [n, setN] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="comment">// step 2 : 使用&lt;Context.Provider&gt; 圈定作用域 </span></span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Context.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">n</span>, <span class="attr">setN</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Parent</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Context.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// step 3 : 在作用域内的组件 通过 useContext(Context) 来使用上下文</span></span><br><span class="line"><span class="keyword">const</span> Parent = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; n &#125; = useContext(Context);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        我是爸爸 n: &#123;n&#125; <span class="tag">&lt;<span class="name">Child</span>/&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// step 3 : 在作用域内的组件 通过 useContext(Context) 来使用上下文</span></span><br><span class="line"><span class="keyword">const</span> Child = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; n, setN &#125; = useContext(Context);</span><br><span class="line">  <span class="keyword">const</span> onClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setN(<span class="function">(<span class="params">i</span>) =&gt;</span> i + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        我是儿子 我得到的 n: &#123;n&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootElement = <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, rootElement);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4-useEffect、useLayoutEffect"><a href="#4-useEffect、useLayoutEffect" class="headerlink" title="4.useEffect、useLayoutEffect"></a>4.useEffect、useLayoutEffect</h1><blockquote><p>原来 React 的 Class 写法比较类似 Vue 的 Optional 写法，会将各个生命周期编写在Class组件内，而改用 Hook 写法后，可以用 useEffect 去模拟各个生命周期，useEffect的执行时机是在浏览器渲染完成之后，每次render后执行。</p></blockquote><blockquote><p>而 useLayoutEffect 则是在 浏览器渲染完成之前执行，就比较类似 Vue 的 beforeMount/onBeforeMount(Vue 3 setup中的钩子) 钩子。</p></blockquote><ul><li><a href="#4-1useEffect%E4%BD%9C%E4%B8%BAcomponentDidMount%E4%BD%BF%E7%94%A8">4.1useEffect作为componentDidMount使用</a></li><li><a href="#4-2useEffect%E4%BD%9C%E4%B8%BAcomponentDidUpdate%E4%BD%BF%E7%94%A8">4.2useEffect作为componentDidUpdate使用</a></li><li><a href="#4-3useEffect%E4%BD%9C%E4%B8%BAcomponentWillUnmount%E4%BD%BF%E7%94%A8">4.3useEffect作为componentWillUnmount使用</a></li></ul><h2 id="4-1useEffect作为componentDidMount使用"><a href="#4-1useEffect作为componentDidMount使用" class="headerlink" title="4.1useEffect作为componentDidMount使用"></a>4.1useEffect作为componentDidMount使用</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [x, setX] = React.useState(<span class="number">0</span>)</span><br><span class="line">  <span class="comment">// 仅执行一次</span></span><br><span class="line">  React.useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 只会执行一次</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;执行了&#x27;</span>)</span><br><span class="line">  &#125;, [])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2useEffect作为componentDidUpdate使用"><a href="#4-2useEffect作为componentDidUpdate使用" class="headerlink" title="4.2useEffect作为componentDidUpdate使用"></a>4.2useEffect作为componentDidUpdate使用</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [x, setX] = React.useState(<span class="number">0</span>)</span><br><span class="line">  <span class="comment">// 仅执行一次</span></span><br><span class="line">  React.useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;执行了&#x27;</span>)</span><br><span class="line">  &#125;, [x]) <span class="comment">// x 变换就执行</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;/*每次点击按钮 就会执行一次 useEffecrt*/&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> set(x + 1)&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3useEffect作为componentWillUnmount使用"><a href="#4-3useEffect作为componentWillUnmount使用" class="headerlink" title="4.3useEffect作为componentWillUnmount使用"></a>4.3useEffect作为componentWillUnmount使用</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [x, setX] = React.useState(<span class="literal">null</span>)</span><br><span class="line">  <span class="comment">// 不会造成内存泄露</span></span><br><span class="line">  React.useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">    <span class="comment">// 清掉副作用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.clearInterval(n)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;/*每次点击按钮 就会执行一次 useEffecrt*/&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> set(x + 1)&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结 :</p><ol><li>组件内存在多个 <code>useEffect</code> 的时候，是按照顺序执行的。</li><li>尽量避免使用 <code>useLayoutEffect</code> ，因为该 api 将渲染提前。</li><li><code>useLayoutEffect</code> 总是比 <code>useEffect</code> 先执行。</li><li><code>useEffect</code> 和 <code>useLayoutEffect</code>中的 <code>deps</code> 如果是一个对象，对象的地址没变，是不会执行回调的。</li></ol><h1 id="5-useMemo、useCallback"><a href="#5-useMemo、useCallback" class="headerlink" title="5.useMemo、useCallback"></a>5.useMemo、useCallback</h1><blockquote><p><code>useMemo</code> 和 <code>useCallback</code> 的前置知识需要先理解 <code>React.memo</code> ，memo的作用是缓存一个组件，因为react默认有多余的render，在 props 不变的情况下，没有必要执行一个函数组件。</p></blockquote><ul><li><a href="#5-1%E6%9C%AA%E7%BB%8F%E8%BF%87React-memo%E5%A4%84%E7%90%86%E7%9A%84demo">5.1未经过React.memo处理的demo</a></li><li><a href="#5-2%E7%BB%8F%E8%BF%87React-memo%E6%90%AD%E9%85%8DuseCallback%E5%A4%84%E7%90%86%E5%90%8E%E7%9A%84demo">5.2经过React.memo搭配useCallback处理后的demo</a></li></ul><h2 id="5-1未经过React-memo处理的demo"><a href="#5-1未经过React-memo处理的demo" class="headerlink" title="5.1未经过React.memo处理的demo"></a>5.1未经过React.memo处理的demo</h2><blockquote><p>未经处理的demo，在点击1或2的时候，都会引起另一个child的re-render。具体演示如下 : <a href="https://oxeb1.csb.app/">memo、useCallback-DEMO1</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import &#123; render &#125; from &quot;react-dom&quot;;</span><br><span class="line">import &#123; useState &#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">const Child1 = props =&gt; &#123;</span><br><span class="line">  console.log(&#x27;child1 渲染了&#x27;)</span><br><span class="line">  const &#123; click, n &#125; = props</span><br><span class="line">  return (</span><br><span class="line">      &lt;button onClick=&#123;click&#125;&gt;&#123;n&#125;&lt;/button&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const Child2 = props =&gt; &#123;</span><br><span class="line">  console.log(&#x27;child2 渲染了&#x27;)</span><br><span class="line">  const &#123; click, m &#125; = props</span><br><span class="line">  return (</span><br><span class="line">      &lt;button onClick=&#123;click&#125;&gt;&#123;m&#125;&lt;/button&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const App = () =&gt; &#123;</span><br><span class="line">  const [n, setN] = useState(0)</span><br><span class="line">  const [m, setM] = useState(0)</span><br><span class="line">  const click1 = () =&gt; setN(n + 1)</span><br><span class="line">  const click2 = () =&gt; setM(m + 1)</span><br><span class="line">  return (</span><br><span class="line">      &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">        &lt;Child1 n=&#123;n&#125; click=&#123;click1&#125;/&gt;</span><br><span class="line">        &lt;Child2 m=&#123;m&#125; click=&#123;click2&#125;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2经过React-memo搭配useCallback处理后的demo"><a href="#5-2经过React-memo搭配useCallback处理后的demo" class="headerlink" title="5.2经过React.memo搭配useCallback处理后的demo"></a>5.2经过React.memo搭配useCallback处理后的demo</h2><blockquote><p>经过 memo 处理后，在点击1或2的时候，仅仅只引起自身的的re-render。具体演示如下 : <a href="https://oxeb1.csb.app/">memo、useCallback-DEMO2</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import &#123; render &#125; from &quot;react-dom&quot;;</span><br><span class="line">import React, &#123; useState &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">const Child1 = React.memo((props) =&gt; &#123;</span><br><span class="line">  console.log(&quot;child1 渲染了&quot;);</span><br><span class="line">  const &#123; click, n &#125; = props;</span><br><span class="line">  return &lt;button onClick=&#123;click&#125;&gt;&#123;n&#125;&lt;/button&gt;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const Child2 = React.memo((props) =&gt; &#123;</span><br><span class="line">  console.log(&quot;child2 渲染了&quot;);</span><br><span class="line">  const &#123; click, m &#125; = props;</span><br><span class="line">  return &lt;button onClick=&#123;click&#125;&gt;&#123;m&#125;&lt;/button&gt;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const App = () =&gt; &#123;</span><br><span class="line">  const [n, setN] = useState(0);</span><br><span class="line">  const [m, setM] = useState(0);</span><br><span class="line">  // useCallback 对每个函数进行缓存 , 是useMemo的简化版</span><br><span class="line">  const click1 = React.useCallback(() =&gt; setN(n + 1), [n]);</span><br><span class="line">  // useMemo 与 useCallback基本一致 , 只是函数返回一个函数</span><br><span class="line">  const click2 = React.useMemo(() =&gt; () =&gt; setM(m + 1), [m]);</span><br><span class="line">  return (</span><br><span class="line">      &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">        &lt;Child1 n=&#123;n&#125; click=&#123;click1&#125;/&gt;</span><br><span class="line">        &lt;Child2 m=&#123;m&#125; click=&#123;click2&#125;/&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &#123;n&#125;,&#123;m&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>useMemo能做的事情更多，类似vue的 computed<br>功能，useMemo能接受两个参数，第一个参数是一个函数，并通过计算得出一个state，第二个参数是这个state的依赖，例如：<code>const num = useMemo(()=&gt; m + n,[m ,n])</code></li><li>一般情况下，现需要用 React.memo 对组件进行包裹，内部再搭配使用<code>useCallback</code>或<code>useMemo</code>，才会生效。</li><li>在实际项目中，尽量减少使用这三个API，因为你并不知道优化后到底是提升了性能还是损失了性能，详见<a href="https://kentcdodds.com/blog/usememo-and-usecallback">When to useMemo and useCallback</a>，该篇博客仔细分析了何时使用 <code>useMemo</code> 和 <code>useCallback</code>。</li></ol><h1 id="6-useRef、forwardRef、useImperativeHandle"><a href="#6-useRef、forwardRef、useImperativeHandle" class="headerlink" title="6.useRef、forwardRef、useImperativeHandle"></a>6.useRef、forwardRef、useImperativeHandle</h1><h1 id="7-自定义hook"><a href="#7-自定义hook" class="headerlink" title="7.自定义hook"></a>7.自定义hook</h1><h1 id="8-stale-closure"><a href="#8-stale-closure" class="headerlink" title="8.stale-closure"></a>8.stale-closure</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这是一篇关于本人 &lt;code&gt;React Hooks&lt;/code&gt; 学习的总结文章，因为有一定 &lt;code&gt;Vue 3&lt;/code&gt; 的编写经验，所以学起来不是那么吃力，下面一些总结仅代表个人看法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;co</summary>
      
    
    
    
    
    <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>JS中的对象与继承</title>
    <link href="http://yoursite.com/2021/02/08/JS%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2021/02/08/JS%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%BB%A7%E6%89%BF/</id>
    <published>2021-02-08T08:34:22.000Z</published>
    <updated>2021-07-13T08:41:31.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS中的对象与继承"><a href="#JS中的对象与继承" class="headerlink" title="JS中的对象与继承"></a>JS中的对象与继承</h1><blockquote><p>本节是阅读《高级程序设计(第四版)》的第八章 <strong>对象、类与面向对象编程</strong> 的总结以及自己的一些理解。</p></blockquote><p>主要解决如下几个问题:</p><ol><li><a href="#1-%E7%90%86%E8%A7%A3%E5%AF%B9%E8%B1%A1">1-理解对象</a></li><li><a href="#2-%E7%90%86%E8%A7%A3%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B">2-理解对象创建过程</a></li><li><a href="#3-%E7%90%86%E8%A7%A3%E7%BB%A7%E6%89%BF">3-理解继承</a></li><li><a href="#4-%E7%90%86%E8%A7%A3%E7%B1%BB">4-理解类</a></li></ol><h1 id="1-理解对象"><a href="#1-理解对象" class="headerlink" title="1.理解对象"></a>1.理解对象</h1><blockquote><p>对象创建的形式一般是创建一个 <code>Object</code> 的实例，然后给它添加属性和方法。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// before</span></span><br><span class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">animal.name = <span class="string">&#x27;dog&#x27;</span></span><br><span class="line">animal.age = <span class="number">8</span></span><br><span class="line">animal.leg = <span class="number">4</span></span><br><span class="line">animal.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// now</span></span><br><span class="line"><span class="comment">// 对象字面量形式声明</span></span><br><span class="line"><span class="keyword">let</span> animal = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;cat&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">legs</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目录 :</p><ol><li><a href="#1-1%E5%B1%9E%E6%80%A7%E7%9A%84%E7%B1%BB%E5%9E%8B">1-1属性的类型</a></li><li><a href="#1-2%E5%AE%9A%E4%B9%89%E5%A4%9A%E4%B8%AA%E5%B1%9E%E6%80%A7">1-2定义多个属性</a></li><li><a href="#1-3%E8%AF%BB%E5%8F%96%E5%B1%9E%E6%80%A7%E7%9A%84%E7%89%B9%E5%BE%81">1-3读取属性的特征</a></li><li><a href="#1-4%E5%90%88%E5%B9%B6%E5%AF%B9%E8%B1%A1">1-4合并对象</a></li><li><a href="#1-5%E5%AF%B9%E8%B1%A1%E6%A0%87%E8%AF%86%E7%AC%A6%E5%8F%8A%E5%88%A4%E5%AE%9A">1-5对象标识符及判定</a></li><li><a href="#1-6%E5%A2%9E%E5%BC%BA%E5%AF%B9%E8%B1%A1%E8%AF%AD%E6%B3%95">1-6增强对象语法</a></li><li><a href="#1-7%E5%AF%B9%E8%B1%A1%E8%A7%A3%E6%9E%84">1-7对象解构</a></li></ol><h2 id="1-1属性的类型"><a href="#1-1属性的类型" class="headerlink" title="1.1属性的类型"></a>1.1属性的类型</h2><blockquote><p>属性的类型分为两种:<strong>数据类型</strong> 和 <strong>访问器类型</strong></p></blockquote><h3 id="1-1-1数据类型"><a href="#1-1-1数据类型" class="headerlink" title="1.1.1数据类型"></a>1.1.1数据类型</h3><blockquote><p>数据属性包含一个保存数据值的位置。值会从这个位置读取，也会写入到这个位置。数据库属性有4个特性描述它们的行为。</p></blockquote><ol><li><code>configurable</code> : 表示属性是否可通过 <code>delete</code> 删除并重新定义。</li><li><code>enumerable</code> : 表示属性是否可以通过 <code>for-in</code> 循环返回。</li><li><code>writable</code> : 表示属性的值是否可以被修改。</li><li><code>value</code> : 包含属性实际的值，默认为 <code>undefined</code> 。</li></ol><p>如想修对象某一个属性的对应的特征，可用<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty()</a><br>去修改，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> temp = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(temp, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 表示该对象的 name 属性的值为 &#x27;xxx&#x27; ,</span></span><br><span class="line"><span class="comment">// 同时,无法通过 delete 关键字去删除这个属性，</span></span><br><span class="line"><span class="comment">// 该属性无法枚举, 因此无法通过 for-in 或 Object.keys()得出，</span></span><br><span class="line"><span class="comment">// 该属性不可写, 因此无法设置 temp.name = &#x27;yyy&#x27; , 该设置会无效。</span></span><br></pre></td></tr></table></figure><h3 id="1-1-2访问器类型"><a href="#1-1-2访问器类型" class="headerlink" title="1.1.2访问器类型"></a>1.1.2访问器类型</h3><blockquote><p>访问器不包含数据值。包含一个 <code>getter</code> 和一个 <code>setter</code> 函数。</p></blockquote><ol><li><code>configurable</code> : 同上。</li><li><code>enumerable</code> : 同上。</li><li><code>get</code> : 获取函数，读取属性时用，默认为 <code>undefined</code> 。</li><li><code>set</code> : 设置函数，设置属性时用，默认为 <code>undefined</code> 。</li></ol><p>同样的，如想修对象某一个属性的对应的特征，可用 <code>Object.defineProperty</code>去修改，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> temp = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(temp, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._name</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._name = val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 表示该对象的 name 属性的值为 &#x27;xxx&#x27; ,</span></span><br><span class="line"><span class="comment">// 同时,无法通过 delete 关键字去删除这个属性，</span></span><br><span class="line"><span class="comment">// 该属性无法枚举, 因此无法通过 for-in 或 Object.keys()得出，</span></span><br><span class="line"><span class="comment">// 该属性会通过 set 去劫持输入的值，并将输入的值 设置为对象自身的私有属性 _name</span></span><br><span class="line"><span class="comment">// 获取该值的时候，实际上是调用 get 函数，即获取的值实际上是对象自身的 _name 的值 而不是 name</span></span><br><span class="line"><span class="comment">// 这样的做法是避免直接使用者直接修改对应的值，从而达到私有属性的一个方法。</span></span><br></pre></td></tr></table></figure><h2 id="1-2定义多个属性"><a href="#1-2定义多个属性" class="headerlink" title="1.2定义多个属性"></a>1.2定义多个属性</h2><blockquote><p>主要是调用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties">Object.defineProperties()</a> 来配置多个属性的值。</p></blockquote><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> temp = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(temp, &#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>._name</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>._name = val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">age</span>: &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="number">12</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>总结: 无论是 <code>Object.defineProperties()</code> 或 <code>Object.defineProperty()</code> ，在对某一个值做配置时，要么使用访问器属性，要么对其 四个特征 进行配置，<code>getter</code> 和 <code>setter</code><br>与 <code>writable</code> 和 <code>value</code> 是 <strong>不能同时存在一个对象描述上</strong> 的。</p><h2 id="1-3读取属性的特征"><a href="#1-3读取属性的特征" class="headerlink" title="1.3读取属性的特征"></a>1.3读取属性的特征</h2><blockquote><p>主要是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor">Object.getOwnPropertyDescriptor()</a> 的应用，该API可取得指定属性的属性描述符，接受两个参数，target 和 属性名。返回的是一个对象，对于访问器属性包含 <code>configurable</code>、<code>enumeranle</code>以及<code>getter</code> 和 <code>setter</code>，如果是数据属性，则包含<code>configurable</code>、<code>enumerable</code>、<code>writable</code>和<code>value</code>，当为一个参数时返回 <strong>undefined</strong>。</p></blockquote><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> animal = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(animal, &#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumrable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;cat&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">legs</span>: &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumrable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>._legs = v</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>._legs</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>Object.getOwnPropertyDescriptor(animal, &#39;name&#39;)</code><br><code>Object.getOwnPropertyDescriptor(animal, &#39;legs&#39;)</code>,结果如下:<br><img src="https://ibb.co/kQrGjNr" alt="avatar"></p><h2 id="1-4合并对象"><a href="#1-4合并对象" class="headerlink" title="1.4合并对象"></a>1.4合并对象</h2><blockquote><p>主要是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">Object.assign()</a> 的应用，该API执行的是一个 <em>潜复制</em>，接受 两个 参数，一个为目标对象，一个为源对象。</p></blockquote><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单复制</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> b = &#123; <span class="attr">c</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="built_in">Object</span>.assign(a, b)</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// &#123; c : 1 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// &#123; c : 1 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a === b) <span class="comment">// false 因为是浅复制,简单类型为2个不同对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">let</span> d = &#123; <span class="attr">b</span>: &#123; <span class="attr">a</span>: <span class="number">1</span> &#125; &#125;</span><br><span class="line"><span class="keyword">let</span> temp = <span class="built_in">Object</span>.assign(c, d)</span><br><span class="line"><span class="built_in">console</span>.log(c) <span class="comment">// &#123;a:1,b:&#123;a:1&#125;&#125; </span></span><br><span class="line"><span class="built_in">console</span>.log(d) <span class="comment">// &#123;a:1,b:&#123;a:1&#125;&#125;</span></span><br><span class="line">d.b.a = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(temp) <span class="comment">// &#123;a:1,b:&#123;a:2&#125;&#125; 浅复制 所以temp值根据d的值也在变换,引用了同一个</span></span><br></pre></td></tr></table></figure><h2 id="1-5对象标识符及判定"><a href="#1-5对象标识符及判定" class="headerlink" title="1.5对象标识符及判定"></a>1.5对象标识符及判定</h2><blockquote><p><a href="">Object.is()</a>的应用，接受2个参数，返回Boolean，与全等判断( === ) 很相似。</p></blockquote><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">0</span> === -<span class="number">0</span> <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>, -<span class="number">0</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="1-6增强对象语法"><a href="#1-6增强对象语法" class="headerlink" title="1.6增强对象语法"></a>1.6增强对象语法</h2><blockquote><p>一些关于对象的语法糖。</p></blockquote><h3 id="1-6-1简写"><a href="#1-6-1简写" class="headerlink" title="1.6.1简写"></a>1.6.1简写</h3><blockquote><p>当对象属性名与属性值相等时，可以简写。</p></blockquote><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// before</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写</span></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj1) <span class="comment">// &#123;a:&#x27;a&#x27;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2) <span class="comment">// &#123;a:&#x27;a&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-6-2可计算变量"><a href="#1-6-2可计算变量" class="headerlink" title="1.6.2可计算变量"></a>1.6.2可计算变量</h3><blockquote><p>可以在对象字面量中完成动态属性赋值。</p></blockquote><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// before</span></span><br><span class="line"><span class="keyword">const</span> nameKey = <span class="string">&#x27;name&#x27;</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;&#125;</span><br><span class="line">person[nameKey] = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person) <span class="comment">// &#123; name : &#x27;xxx&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可计算变量</span></span><br><span class="line"><span class="keyword">let</span> person2 = &#123;</span><br><span class="line">  [nameKey]: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person2) <span class="comment">// &#123; name : &#x27;xxx&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更复杂的场景</span></span><br><span class="line"><span class="keyword">const</span> getKey = <span class="function">(<span class="params">key</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;key&#125;</span>_dynamic`</span></span><br><span class="line"><span class="keyword">let</span> person3 = &#123;</span><br><span class="line">  [getKey(nameKey)]: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person3) <span class="comment">// &#123; name_dynamic : &#x27;xxx&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-6-3简写方法名"><a href="#1-6-3简写方法名" class="headerlink" title="1.6.3简写方法名"></a>1.6.3简写方法名</h3><p>例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// before</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.sayName() <span class="comment">// &#x27;xxx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写</span></span><br><span class="line"><span class="keyword">let</span> person2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">person2.sayName() <span class="comment">// &#x27;xxx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 和可计算属性混用</span></span><br><span class="line"><span class="keyword">const</span> methodKey = <span class="string">&#x27;sayName&#x27;</span></span><br><span class="line"><span class="keyword">let</span> person3 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">  [methodKey]() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">person3.sayName() <span class="comment">// &#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="1-7对象解构"><a href="#1-7对象解构" class="headerlink" title="1.7对象解构"></a>1.7对象解构</h2><blockquote><p>个人认为对象解构，极大程度减少了代码中变量声明这块的代码量，使代码变得更简洁易懂。</p></blockquote><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> animal = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;cat&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// before</span></span><br><span class="line"><span class="keyword">let</span> name = animal.name</span><br><span class="line"><span class="keyword">let</span> age = animal.age</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值</span></span><br><span class="line"><span class="keyword">let</span> &#123; name, age &#125; = animal</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重命名的解构赋值</span></span><br><span class="line"><span class="keyword">let</span> &#123; name1 = animal.name, age1 = animal.age &#125; = animal</span><br></pre></td></tr></table></figure><h3 id="1-7-1嵌套解构"><a href="#1-7-1嵌套解构" class="headerlink" title="1.7.1嵌套解构"></a>1.7.1嵌套解构</h3><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> animal = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;cat&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">group</span>: &#123;</span><br><span class="line">    <span class="attr">belong</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一定要在外层有定义的情况下才能使用嵌套解构</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">group</span>: belong &#125; = animal</span><br><span class="line"><span class="built_in">console</span>.log(belong) <span class="comment">// &#123;belong:&#x27;xxx&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-7-2部分解构"><a href="#1-7-2部分解构" class="headerlink" title="1.7.2部分解构"></a>1.7.2部分解构</h3><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> animal = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;cat&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">group</span>: &#123;</span><br><span class="line">    <span class="attr">belong</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; name &#125; = person</span><br><span class="line"><span class="built_in">console</span>.log(age) <span class="comment">// age is not define</span></span><br></pre></td></tr></table></figure><h1 id="2-理解对象创建过程"><a href="#2-理解对象创建过程" class="headerlink" title="2.理解对象创建过程"></a>2.理解对象创建过程</h1><h1 id="3-理解继承"><a href="#3-理解继承" class="headerlink" title="3.理解继承"></a>3.理解继承</h1><h1 id="4-理解类"><a href="#4-理解类" class="headerlink" title="4.理解类"></a>4.理解类</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JS中的对象与继承&quot;&gt;&lt;a href=&quot;#JS中的对象与继承&quot; class=&quot;headerlink&quot; title=&quot;JS中的对象与继承&quot;&gt;&lt;/a&gt;JS中的对象与继承&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本节是阅读《高级程序设计(第四版)》的第八章 &lt;stron</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Webpack</title>
    <link href="http://yoursite.com/2021/01/23/webpack/"/>
    <id>http://yoursite.com/2021/01/23/webpack/</id>
    <published>2021-01-23T09:04:22.000Z</published>
    <updated>2021-02-08T07:55:08.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于webpack的一些东西"><a href="#关于webpack的一些东西" class="headerlink" title="关于webpack的一些东西"></a>关于webpack的一些东西</h1><h2 id="项目初始"><a href="#项目初始" class="headerlink" title="项目初始"></a>项目初始</h2><h3 id="创建一个目录"><a href="#创建一个目录" class="headerlink" title="创建一个目录"></a>创建一个目录</h3><blockquote><p>我是在macos系统下做的开发,所以通过命令直接创建,一个新目录.</p></blockquote><ol><li><code>mkdir webpack</code></li><li><code>cd webpack</code></li></ol><h3 id="初始化项目配置"><a href="#初始化项目配置" class="headerlink" title="初始化项目配置"></a>初始化项目配置</h3><blockquote><p>采用的yarn</p></blockquote><ol><li>在命令行输入 <code>yarn init -y</code></li><li>在命令行输入 <code>git init</code> 此步操作为了记录该过程,所以将项目一并上传至github</li></ol><h3 id="下载webpack"><a href="#下载webpack" class="headerlink" title="下载webpack"></a>下载webpack</h3><ol><li>在命令行输入 <code>yarn add webpack webpack-cli -D</code></li></ol><h3 id="在src文件夹下添加文件src-index-js"><a href="#在src文件夹下添加文件src-index-js" class="headerlink" title="在src文件夹下添加文件src/index.js"></a>在src文件夹下添加文件src/index.js</h3><blockquote><p>添加完成后输入代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Animal(<span class="string">&#x27;dog&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="打包文件"><a href="#打包文件" class="headerlink" title="打包文件"></a>打包文件</h3><ol><li>在命令行输入 <code>npx webpack -mode=development</code></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>此时就可以看到dist目录下的 main.js 文件了, 该文件就是webpack默认配置下对 src/index.js 文件打包的结果.</li><li>默认配置文件在 node_modules/webpack/lib/WebpackOptionsDefaulter.js </li><li>此时发现index.js使用的语法是es6,而一般我们都需要将高级语法转换为es5语法,来达到兼容性的问题,所以此时的webpack不足以支撑整个项目.</li></ol><h2 id="添加babel转义"><a href="#添加babel转义" class="headerlink" title="添加babel转义"></a>添加babel转义</h2><h3 id="配置webpack"><a href="#配置webpack" class="headerlink" title="配置webpack"></a>配置webpack</h3><ol><li><p>添加 <code>webpack.config.js</code> 文件</p></li><li><p>填入如下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">     rules:[</span><br><span class="line">         &#123;</span><br><span class="line">             test:/\.jsx$/,</span><br><span class="line">             use:&#x27;babel-loader&#x27;,</span><br><span class="line">             exclude:/node_modules/</span><br><span class="line">         &#125;</span><br><span class="line">     ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="下载babel"><a href="#下载babel" class="headerlink" title="下载babel"></a>下载babel</h3><ol><li>命令行输入    <code>yarn add babel-loader -D</code></li><li>安装babel依赖 <code>yarn add @babel/core @babel/preset-env @babel/plugin-transform-runtime -D</code></li><li>命令行输入 <code>yarn add @babel/runtime @babel/runtime-corejs3</code></li></ol><h3 id="webpack的mode"><a href="#webpack的mode" class="headerlink" title="webpack的mode"></a>webpack的mode</h3><ol><li><p>development：将 <code>process.env.NODE_ENV</code> 的值设置为 <code>development</code>，启用 <code>NamedChunksPlugin</code> 和 <code>NamedModulesPlugin</code></p></li><li><p>production：将 <code>process.env.NODE_ENV</code> 的值设置为 <code>production</code>，启用 <code>FlagDependencyUsagePlugin</code>, <code>FlagIncludedChunksPlugin</code>,<br><code>ModuleConcatenationPlugin</code>, <code>NoEmitOnErrorsPlugin</code>, <code>OccurrenceOrderPlugin</code>, <code>SideEffectsFlagPlugin</code> 和 <code>UglifyJsPlugin</code></p></li></ol><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ol><li>上图为webpack 4 的配置, webpack 5 下节更新</li><li>语法降级需要使用 babel-loader.</li><li>webpack.config.js文件中的use语法,有三种,详细注释在本项目的文件内</li><li>mode中还有一个为<code>node</code>模式</li></ol><h2 id="在浏览器中查看打包后的页面"><a href="#在浏览器中查看打包后的页面" class="headerlink" title="在浏览器中查看打包后的页面"></a>在浏览器中查看打包后的页面</h2><h3 id="下载-html-webpack-plugin"><a href="#下载-html-webpack-plugin" class="headerlink" title="下载 html-webpack-plugin"></a>下载 html-webpack-plugin</h3><ol><li>命令行输入 <code>yarn add html-webpack-plugin -D</code></li></ol><h3 id="修改-webpack-config-js-配置-添加插件"><a href="#修改-webpack-config-js-配置-添加插件" class="headerlink" title="修改 webpack.config.js 配置 添加插件"></a>修改 webpack.config.js 配置 添加插件</h3><ol><li><p>修改如下配置</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="comment">// 入口文件</span></span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./public/index.html&#x27;</span>,</span><br><span class="line">      <span class="comment">// 打包后的文件名称</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">      <span class="attr">minify</span>: &#123;</span><br><span class="line">        <span class="comment">// 是否删除属性的双引号</span></span><br><span class="line">        <span class="attr">removeAttributeQuotes</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// 是否折叠空白</span></span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 是否加上hash,默认是false</span></span><br><span class="line">      <span class="comment">// hash:true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>此时执行<code>npx webpack</code> 就可以看到 <code>dist</code> 目录下的 <code>index.html</code> 文件了</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于webpack的一些东西&quot;&gt;&lt;a href=&quot;#关于webpack的一些东西&quot; class=&quot;headerlink&quot; title=&quot;关于webpack的一些东西&quot;&gt;&lt;/a&gt;关于webpack的一些东西&lt;/h1&gt;&lt;h2 id=&quot;项目初始&quot;&gt;&lt;a href=&quot;#项</summary>
      
    
    
    
    
    <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Vue 3</title>
    <link href="http://yoursite.com/2020/12/20/Vue3/"/>
    <id>http://yoursite.com/2020/12/20/Vue3/</id>
    <published>2020-12-20T07:04:38.000Z</published>
    <updated>2021-02-08T07:55:09.154Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-3的一些操作"><a href="#Vue-3的一些操作" class="headerlink" title="Vue 3的一些操作"></a>Vue 3的一些操作</h1><ol><li>setup中修改属性的值需要 <code>target.value</code> 去获取到值.</li><li><code>inheritAttrs:false</code> 取消默认绑定</li><li>使用 <code>$attrs/context.attrs</code> 可以获取所有属性</li><li>使用 <code>v-bind=$attrs</code> 批量绑定属性</li><li><code>props</code> 和 <code>attrs</code> 的区别<ol><li>props 要先声明才能取值，attrs 不用先声明</li><li>props 不包含时间，attrs包含</li><li>props 没有声明的属性，会转移到attrs里面</li><li>props 支持 string 类型以外的类型，attrs 只有个string类型</li></ol></li><li>钩子函数的变更<ol><li>Vue2.X: beforeCreate-&gt;created-&gt;beforeMount-&gt;mounted-&gt;beforeUpdate-&gt;updated-&gt;beforeDestroy-&gt;destroyed</li><li>Vue3.X(options): beforeCreate-&gt;created-&gt;beforeMount-&gt;mounted-&gt;beforeUpdate-&gt;updated-&gt;beforeUnmount-&gt;unmounted</li><li>Vue3.X(hook setup):onBeforeMount-&gt;onMounted-&gt;onBeforeUpdate-&gt;onUpdated-&gt;onBeforeUnmont-&gt;onUnmounted</li><li><code>setup</code> 围绕 <code>beforeCreate</code> 和 <code>created</code>运行的，不需要显示的定义</li></ol></li></ol><h1 id="ui-库的-css-注意事项"><a href="#ui-库的-css-注意事项" class="headerlink" title="ui 库的 css 注意事项"></a>ui 库的 css 注意事项</h1><ol><li>不使用scoped属性<ol><li><code>data-v-[hash]</code> 中的 <code>[hash]</code> 每次运行会变</li><li>必须输出稳定不变的class选择器, 方便使用者覆盖</li></ol></li><li>必须加前缀<ol><li>避免被误覆盖</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-3的一些操作&quot;&gt;&lt;a href=&quot;#Vue-3的一些操作&quot; class=&quot;headerlink&quot; title=&quot;Vue 3的一些操作&quot;&gt;&lt;/a&gt;Vue 3的一些操作&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;setup中修改属性的值需要 &lt;code&gt;target.valu</summary>
      
    
    
    
    
    <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>浏览器工作原理</title>
    <link href="http://yoursite.com/2020/08/30/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2020/08/30/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</id>
    <published>2020-08-30T09:04:38.000Z</published>
    <updated>2021-08-19T07:56:27.749Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在极客时间学习<code>&lt;浏览器工作原理&gt;</code>一课的一些笔记</p></blockquote><h1 id="开篇词的学习"><a href="#开篇词的学习" class="headerlink" title="开篇词的学习"></a>开篇词的学习</h1><ol><li><p>浏览器进化的三个阶段</p><ol><li>应用程序化</li><li>web应用移动化</li><li>web操作系统化</li></ol></li><li><p>了解浏览器工作原理的两大优势</p><ol><li>准确评估项目的可行性(需多语言基础,及后端知识)</li><li>更高纬度审视页面,如:<ol><li>用户请求首屏加载慢<ol><li>ssr技术 , 如Airbnb主</li><li>缓存(cache-control) , 优化接口请求次数 , 打包文件体积优化(gzip)</li></ol></li><li>操作dom某个功能元素,如button反应迟钝<ol><li>优化该元素功能函数的内部逻辑(减少console.log()、优化冗余逻辑)</li><li>审视当前页面的性能消耗 , 如减少监听器 或 通过eventhub实现发布订阅等</li></ol></li><li>web中动画没有60帧<ol><li>??? 没遇到过做动画的情况</li><li>2020-08-15 补充 : 通过设置 CSS <code>will-change</code> 属性，使元素单独分层，优化动画。</li></ol></li></ol></li></ol></li><li><p>首屏加载问题</p><ol><li>DNS, HTTP解析</li><li>DOM 解析</li><li>CSS 阻塞</li><li>JS 阻塞</li></ol><p> <em>以上任意一步产生问题,均将造成加载延迟</em></p></li></ol><hr><h1 id="宏观视角下的浏览器的学习"><a href="#宏观视角下的浏览器的学习" class="headerlink" title="宏观视角下的浏览器的学习"></a>宏观视角下的浏览器的学习</h1><h2 id="第一课-打开chorme有4个进程"><a href="#第一课-打开chorme有4个进程" class="headerlink" title="第一课 (打开chorme有4个进程)"></a>第一课 (打开chorme有4个进程)</h2><blockquote><p>打开浏览器,如 <code>chorme</code> 会有4个进程</p></blockquote><ol><li><p>进程和线程的四大特点 :</p><ol><li>进程 中任意线程出错 , 导致整个 进程 崩溃</li><li><code>线程</code> 之间共享 <code>进程</code> 中的数据</li><li>当一个进程关闭之后,操作系统会回收进程所占用的内存</li><li>进程之间的内容相互隔离</li></ol></li><li><p>单进程浏览器缺点:</p><ol><li>不稳定<ol><li>一个插件会引起整个浏览器崩溃</li><li>复杂的JavaScript代码也会引起浏览器崩溃</li></ol></li><li>不流畅<ol><li>如代码中有无限循环的判断条件,单进程会独占所有内存来执行</li></ol></li><li>不安全<ol><li>插件可以通过 c/c++来编写,即 可以访问操作系统人以资源</li><li>页面脚本则可通过浏览器漏洞获取系统权限(盗号)</li></ol></li></ol></li><li><p>多线程浏览器解决以上问题</p><ol><li>不稳定<ol><li>进程相互隔离,不会导致浏览器崩溃</li></ol></li><li>不流畅<ol><li>即使 js文件 渲染阻塞也仅仅影响 <code>当前</code> 页面,同时内存泄露也只需关闭当前页面便能垃圾回收</li></ol></li><li>不安全 <ol><li>多进程有额外的安全沙箱, chorme 吧插件进程所在安全沙箱内(safe sandbox)</li></ol></li></ol></li><li><p>最新浏览器具备5个进程</p><ol><li>浏览器主进程<ol><li>界面显示,用户交互,子进程管理,存储等</li></ol></li><li>GPU进程<ol><li>实现 3D CSS 效果</li></ol></li><li>网络进程<ol><li>负责网络资源加载</li></ol></li><li>渲染进程<ol><li>HTML,CSS,JS文件的渲染</li></ol></li><li>插件进程<ol><li>运行插件</li></ol></li></ol><p> <em>打开浏览器至少有以上4个进程(除插件)</em>  </p></li></ol><h2 id="第二课-TCP"><a href="#第二课-TCP" class="headerlink" title="第二课 (TCP)"></a>第二课 (TCP)</h2><blockquote><p>FP(first paint):指从页面加载到首次开始绘制的时长.<br>首先要确定一个观点, 互联网中文件传输是通过 <code>数据包</code> 来传输的.</p></blockquote><ol><li><p>一个数据包从<code>主机A</code>到<code>主机B</code>的传输过程:  </p><ol><li><code>主机A</code> 的上层传递数据包给 <code>主机A</code> 网络层</li><li><code>主机A</code> 的网络层添加IP头并组成 <code>新的IP数据包</code> 传到底层</li><li><code>主机A</code> 底层通过物理传输(链路层)给目标 <code>主机B</code></li><li><code>主机B</code> 网络层接受并开始解析传递过来的数据包(拆开IP头)并把拆下IP头的数据包传递给 <code>主机B</code> 的上层</li><li><code>主机B</code> 的上层接受网络层传过来的数据包</li></ol></li><li><p>UDP协议: 用户数据包协议（User Datagram Protocol）</p><ol><li>UDP不保证数据可靠性,传输速率快</li><li>此时需在基于添加<code>IP头</code>的 网络层之上的 <code>传输层</code> 添加UDP协议</li><li>一个数据包从<code>主机A</code>到<code>主机B</code>的传输过程(包含UDP协议):  <ol><li><code>主机A</code> 的上层传递数据包给 <code>主机A</code> 传输层</li><li><code>主机A</code> 的传输层添加 <code>UDP头</code> 并组成 <code>新的数据包</code> 传到 网络层</li><li><code>主机A</code> 的网络层添加IP头并组成 <code>新的IP数据包</code> 传到底层</li><li><code>主机A</code> 底层通过物理传输(链路层)给目标 <code>主机B</code></li><li><code>主机B</code> 网络层 接受并开始解析 传递过来的数据包(拆开IP头)并把拆下IP头的数据包传递给 <code>主机B</code> 的 传输层</li><li><code>主机B</code> 网络层解析完毕后的数据包传递给 <code>主机B</code> 的 传输层,并开始解析(拆开UDP头),并把拆下后的数据包传递给 <code>主机B</code> 的上层</li><li><code>主机B</code> 收到来自 <code>主机B</code> 传输层的数据包  </li></ol></li><li>UDP协议的缺点:<ol><li>数据包在传输过程中容易丢失</li><li>大文件拆分来传递,UDP并不能组合这些数据包</li></ol></li></ol></li><li><p>TCP：把数据完整地送达应用程序</p><ol><li>TCP协议解决UDP协议的两个问题:<ol><li>对于数据包丢失的情况，TCP 提供重传机制</li><li>TCP 引入了数据包排序机制，用来保证把乱序的数据包组合成一个完整的文件</li></ol></li><li>数据传输流程同UDP协议,唯一不同的是协议由UDP头变更为TCP头</li><li>完整的TCP链接又包含3个步骤<ol><li><code>三次握手,建立链接</code>(以下以客户C(client)端和服务器S(sever)来举例)<ol><li>C-&gt;S 传递一个数据包,并对S说:我能建立链接了吗 (第一次)</li><li>S-&gt;C S收到数据包 , 确认过后 , 对C说 : 可以建立链接了 (第二次)</li><li>C-&gt;S C收到S的数据包 , 确认可以连接了 , 此时三次握手完毕 (第三次)</li></ol></li><li>传输阶段 开始进行数据传输</li><li><code>四次挥手,断开链接</code></li><li>S-&gt;C 传输完所有数据后，对C说，我数据传输完毕了。</li><li>C-&gt;S 接受后对 S 说，哦，我知道了。</li><li>C-&gt;S 再次发送消息，我也传输完了。</li><li>S-&gt;C 接受后，哦，我知道了，此时完成四次挥手。</li></ol></li></ol></li><li><p>总结</p><ol><li>数据传输通过数据包链接,数据包在传输过程中易丢失和出错</li><li>IP 负责把数据包送达目的主机</li><li>UDP 负责把数据包送达具体应用</li><li>TCP 保证了数据完整地传输，它的连接可分为三个阶段：建立连接、传输数据和断开连接</li></ol></li></ol><hr><h2 id="第三课-构建HTTP请求"><a href="#第三课-构建HTTP请求" class="headerlink" title="第三课 (构建HTTP请求)"></a>第三课 (构建HTTP请求)</h2><blockquote><p>主要是关于浏览器构建HTTP请求的过程<br>HTTP是 建立在 TCP 连接基础 之上的, 一种允许浏览器向服务器获取资源的协议，是 Web 的基础</p></blockquote><ol><li><p>浏览器端发起 HTTP 请求流程:</p><ol><li>构建请求:一般是 <code>GET / index.html HTTP 1.1</code> </li><li>查找缓存(解决两个问题)<ol><li>缓解服务器压力,提升性能</li><li>对网站来说,缓存是实现快速资源加载的重要部分</li></ol></li><li>准备IP地址和端口(DNS查询)</li><li>等待TCP队列(TCP队列不超过6个)</li><li>建立TCP连接(三次握手建立连接,传输数据,四次挥手断开连接) </li><li>发送HTTP请求</li></ol></li><li><p>服务器端处理 HTTP 请求流程 :</p><ol><li>返回请求<ol><li>带上HTTP报文 和 HTTP 实体 返回 响应</li><li>响应包括响应行 响应头 响应体</li><li>通过状态码来查询响应的状态</li></ol></li><li>断开连接(如果加入Connection:Keep-Alive,TCP便不会断开连接)</li><li>重定向</li></ol></li><li><p>为什么很多站点第二次打开速度会很快?</p><ol><li>因为缓存的机制</li><li>浏览器构建HTTP请求,从服务器得到响应(添加了cache-control,此时便有缓存)</li><li>第二次进入相同站点,服务器收到HTTP请求会先查询是否有cache-control,如果未过期,则直接跳过该部分资源的请求</li><li>如果缓存过期,则请求该缓存部分最新数据,再次进行缓存</li></ol></li><li><p>登录状态是如何保持的？ </p><ol><li>cookie 通过 服务器 响应 添加 <code>Set-Cookie</code> 进行设置的</li><li>用户登录后 发送请求 携带上 <code>Cookie</code> </li><li>服务器收到 请求后对比 cookie 检验是否过期,未过期则保持登录状态</li></ol></li></ol><h2 id="第四课-为4-6的总结-页面从导航到展示的过程"><a href="#第四课-为4-6的总结-页面从导航到展示的过程" class="headerlink" title="第四课(为4-6的总结 页面从导航到展示的过程)"></a>第四课(为4-6的总结 页面从导航到展示的过程)</h2><blockquote><p>只解决一个问题,从输入URL到页面展示，这中间发生了什么？</p></blockquote><ol><li><p>简易流程</p><ol><li>浏览器进程收到用户输入的URL请求,浏览器进程将URL转发给网络进程</li><li>网络进程发起真正的URL请求</li><li>网络进程收到响应头,开始解析响应头数据,并将数据转发给浏览器进程</li><li>浏览器进程收到网络进程响应头数据后,发送<code>提交导航</code>消息给渲染进程</li><li>渲染进程接到<code>提交导航</code> 消息后 ,开始准备接受HTML数据,接受方式是与<code>网络进程建立连接通道</code></li><li>最后渲染进程向浏览器进程<code>确认提交</code></li><li>浏览器进程收到渲染进程的<code>提交文档</code>消息后,开始移除之前的旧文档,更新浏览器进程中的页面状态</li><li>小结:用户发出的URL请求到页面开始解析的过程叫导航</li></ol></li><li><p>详细流程</p><ol><li>用户输入(判断输入关键字还是URL)<ol><li>如果是搜索内容，地址栏会使用浏览器默认的搜索引擎，来合成新的带搜索关键字的 URL。</li><li>如果是链接,浏览器加上HTTP协议,并传递给网络层</li></ol></li><li>URL请求过程<ol><li>查找缓存<ol><li>有缓存: 进入网络进程解析响应流程</li><li>无缓存: <ol><li>进行DNS解析, 获取IP地址和端口</li><li>利用IP地址和服务器建立TCP连接</li><li>构建请求头</li><li>发送请求头</li><li>进入网络进程解析响应流程</li></ol></li></ol></li></ol></li><li>网络进程解析响应过程:<ol><li>1开头, 表明连接建立 , 还在处理中</li><li>2开头, 表明响应成功 , 走到第 4 步</li><li>3开头, 表示重定向 , 重新由步骤 2 开始 , 向重定向的地址发送请求</li><li>4开头, 表示客户端错误 , 返回错误信息</li><li>5开头, 表示服务器错误 , 返回错误信息</li></ol></li><li>渲染进程接收<code>提交导航</code><ol><li>将HTML文件转换成浏览器看得懂的语言, 生成DOM树</li><li>将CSS文件转换成浏览器看得懂的语言 <code>stylesheet</code> , 并计算DOM树中各个节点的CSS属性</li><li>渲染进程根据DOM树中各个节点 , 生成对应的 <code>布局树</code></li><li>对布局树进行分层 , 并生成 <code>分层树</code> z-index</li><li>为每个图层生成绘制列表 , 并提交给 <code>合成进程</code></li><li><code>合成进程</code>将图层分成土块,并在光栅化线程池中将图块转换成位图</li><li>合成线程发送绘制图块命令 <code>DrawQuad</code> 给浏览器进程</li><li>浏览器进程根据 <code>DrawQuad</code> 消息生成页面, 并显示到显示器上</li></ol></li></ol></li><li><p>以上就是浏览器输入URL到页面展示过程的完整过程 </p></li><li><p>总结</p><ol><li>优化首屏加载速度可以从4个方面入手<ol><li>JS文件阻塞</li><li>CSS文件阻塞</li><li>HTML文件阻塞</li><li>DNS, HTTP解析</li></ol></li><li>浏览器渲染进程中,冗余的css会造成浏览器的额外开销<ol><li>重排: 更新元素几何属性, 例如: 高度, 宽度 , 开销最大</li><li>重绘: 更新元素的绘制属性, 例如: 背景色 , 开销其次</li><li>直接合成: 如transition, 开销最小</li><li>减少重排,重绘的解决办法<ol><li>用class替代style</li><li>避免table布局</li><li>批量操作DOM,如框架</li><li>禁用浏览器的Debounce resize 事件</li><li>对DOM属性进行读写分离</li><li>will-change(上下层叠属性):transform 优化</li></ol></li></ol></li></ol></li></ol><hr><h1 id="浏览器中JavaScript执行机制"><a href="#浏览器中JavaScript执行机制" class="headerlink" title="浏览器中JavaScript执行机制"></a>浏览器中JavaScript执行机制</h1><h2 id="第一课-变量提升"><a href="#第一课-变量提升" class="headerlink" title="第一课 (变量提升)"></a>第一课 (变量提升)</h2><blockquote><p>需要搞懂js 的执行上下文</p></blockquote><ol><li><p>以 <code>var a = 1</code> 为例, 到输出结果的过程</p><ol><li>对语句进行词法分析, 结果为 <code>var , a , = , 2 </code></li><li>进行语法分析, 形成抽象语法树, 其根(root)为 var 的顶级节点, 叶子节点为 a 和 2</li><li>代码生成, 创建一个 a 的变量(LHS), 并将 2 赋值给 a (RHS), 过程为 , <code>var a</code> 和 <code>a = 2</code></li></ol></li><li><p>变量提升</p><ol><li>上述过程清晰阐述了语句 <code>var a = 1</code> 的过程, 在期间,使用 <code>var</code> 来声明变量, 会使得 <code>var a</code> 语句提升到 全局执行上下文的最前面, 再对其进行赋值操作.</li><li>这就是为什么 console.log(a) 在前 var a = 2 在后 ,却能打出 a 的值为2的分析过程</li><li>如果在此过程中声明函数<code>function a()&#123;&#125;</code> , a 会被 function 覆盖.</li></ol></li></ol><h2 id="第二课-调用栈"><a href="#第二课-调用栈" class="headerlink" title="第二课 (调用栈)"></a>第二课 (调用栈)</h2><blockquote><p>总得来说, 执行函数, 是先将函数压入调用栈, 执行完毕后, 再弹出调用栈的操作<br>栈的特点是后进先出, js的调用栈称为执行上下文栈</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var a = 2</span><br><span class="line">function add()&#123;</span><br><span class="line">var b = 10</span><br><span class="line">return  a+b</span><br><span class="line">&#125;</span><br><span class="line">add()</span><br></pre></td></tr></table></figure><ol><li>考虑上述代码 , 其执行顺序为 :<ol><li>从全局执行上下文中，取出 add 函数代码。</li><li>对 add 函数的这段代码进行编译，并创建该函数的执行上下文和可执行代码。</li><li>执行代码，输出结果。</li></ol></li><li>抽象对js函数执行的理解 , 大致步骤如下 :<ol><li>创建全局上下文，并将其压入栈底。</li><li>第二步是调用 add 函数。</li><li>如果 add 函数内部还有函数 , 将 add 内部执行函数 压入 调用栈</li><li>当 <code>add 内部函数</code> 执行完毕 , 返回结果 , 并弹出栈 , 开始执行 add 函数</li><li>当 add 函数 执行完毕 , 返回值</li></ol></li></ol><h2 id="第三课-作用域和闭包"><a href="#第三课-作用域和闭包" class="headerlink" title="第三课 (作用域和闭包)"></a>第三课 (作用域和闭包)</h2><blockquote><p>作用域是指 变量与函数的可访问范围<br>ES6之前 , 作用域分 全局作用域 和 函数作用域<br>ES6之后 , 出现 块级作用域</p></blockquote><ol><li>全局作用域 : 对象在代码中的任何地方都能访问，其生命周期伴随着页面的生命周期。用 <code>var</code> 声明的变量, 存储在 <code>变量环境</code> 中</li><li>函数作用域 : 函数内部定义的变量或者函数，并且定义的变量或者函数只能在函数内部被访问。函数执行结束之后，函数内部定义的变量会被销毁。<ol><li>闭包 :</li></ol></li><li>块级作用域 : 比如函数、判断语句、循环语句，甚至单独的一个{}都可以被看作是一个块级作用域 , 块级作用域内的变量 仅在块级作用域内有效。<ol><li>在块级作用域内使用 <code>let</code> 和 <code>const</code> 声明变量 , 会形成 暂死区 , 此时得不到变量的值,但是 <code>词法环境</code> 中却存在该变量</li></ol></li><li>作用域链 : 当前执行函数, 如果引用了本身没有的变量 , 会从本层的外层寻找该变量 , 考虑函数执行上下文 , 并分析 outer 为 上一个函数的作用域 , 还是 全局作用域.</li></ol><h2 id="第四课-this"><a href="#第四课-this" class="headerlink" title="第四课 (this)"></a>第四课 (this)</h2><blockquote><p>关键字 <code>this</code> 不会凭空出现 , 分析其 执行上下文 , 就能得出 <code>this</code> 的指向</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;</span><br><span class="line">    name:&#x27;xxx&#x27;,</span><br><span class="line">    getName(name)&#123;</span><br><span class="line">        console.log(this)</span><br><span class="line">        console.log(this.name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">let x = obj.getName</span><br></pre></td></tr></table></figure><ol><li>绑定 <code>this</code> 的 三种形式 : <ol><li>显示绑定 : <ol><li>obj.getName.call(obj)</li><li>obj.getName.apply(obj)</li><li>obj.getName.bind(this)()<ol><li>.bind()操作只返回一个函数,需要自己手动调用</li><li>.call()和.apply()不需要手动调用,会自动调用,仅仅是传参不同</li></ol></li></ol></li><li>隐式绑定 :<ol><li>x() === window.x.call(window) , 结果为 window 和 空</li></ol></li><li>new 操作的 this 指向 new 出来的那个对象 , new 的操作如下<ol><li>新建一个临时对象 let newTemp = {}</li><li>调用 createObj.call(newTemp)</li><li>执行 createObj 函数</li><li>返回这个临时对象</li></ol></li><li>箭头函数中的 this 与执行上下文中的 this 相同 </li></ol></li></ol><h1 id="V8工作原理"><a href="#V8工作原理" class="headerlink" title="V8工作原理"></a>V8工作原理</h1><h2 id="第一课-栈和堆"><a href="#第一课-栈和堆" class="headerlink" title="第一课(栈和堆)"></a>第一课(栈和堆)</h2><blockquote><p>JavaScript 的 7 种基本类型分别是<br>Number,String,Boolean,BigInt,Symbol,Null和Undefined.<br>JavaScript 的 引用类型只有一种 Object</p></blockquote><ol><li>js存储方式<ol><li>基本类型 存储于 <code>栈内存</code> 中, 栈内存仅仅只存储 <code>引用类型的地址</code></li><li>引用类型 存储于 <code>堆内存</code> 中, 堆中的数据是通过引用和变量关联起来的</li></ol></li></ol><h2 id="第二课-垃圾回收"><a href="#第二课-垃圾回收" class="headerlink" title="第二课(垃圾回收)"></a>第二课(垃圾回收)</h2><blockquote><p>有些数据被使用之后，可能就不再需要了，我们把这种数据称为垃圾数据。<br>如果这些垃圾数据一直保存在内存中，那么内存会越用越多，<br>所以我们需要对这些垃圾数据进行回收，以释放有限的内存空间。</p></blockquote><ol><li>不同语言的垃圾回收政策<ol><li>手动回收<ol><li>手动使变量的值为null</li></ol></li><li>自动回收<ol><li>JS执行过后的变量垃圾也分为两种<ol><li>新生代的垃圾<ol><li>副垃圾回收器，主要负责新生代的垃圾回收。</li></ol></li><li>老生代的垃圾<ol><li>主垃圾回收器，主要负责老生代的垃圾回收。</li></ol></li></ol></li></ol></li></ol></li><li>垃圾不回收造成的问题<ol><li>内存泄漏</li><li>直观的感受就是页面越来越卡</li></ol></li><li>避免以上的原因<ol><li>尽量少使用闭包, 闭包会使函数的引用变量一直存放在内存中, 长时间占用内存</li><li>确定不使用的临时变量时使其值为 null</li></ol></li></ol><h2 id="第三课-V8如何执行一段JS代码"><a href="#第三课-V8如何执行一段JS代码" class="headerlink" title="第三课(V8如何执行一段JS代码)"></a>第三课(V8如何执行一段JS代码)</h2><blockquote><p>需要理解的几个重要概念<br>编译器（Compiler）、解释器（Interpreter）、抽象语法树（AST）、<br>字节码（Bytecode）、即时编译器（JIT）</p></blockquote><ol><li>在编译器语言编译过程中<ol><li>编译器对源代码进行词法分析和语法分析, 生成抽象语法树</li><li>优化代码</li><li>最后生成处理器能理解的代码<ol><li>如果编译成功，将会生成一个可执行的文件。</li><li>如果编译过程发生了语法或者其他的错误，那么编译器就会抛出异常，最后的二进制文件也不会生成成功。</li></ol></li></ol></li><li>在解释型语言的解释过程中<ol><li>同样解释器也会对源代码进行词法分析、语法分析，并生成抽象语法树（AST）</li><li>不过它会再基于抽象语法树生成字节码</li><li>最后再根据字节码来执行程序、输出结果。</li></ol></li><li>抽象语法树<ol><li>是源代码语法结构的一种抽象表示</li></ol></li><li>字节码<ol><li>字节码就是介于 AST 和机器码之间的一种代码。但是与特定类型的机器码无关，字节码需要通过解释器将其转换为机器码后才能执行。</li></ol></li><li>即时编译器<ol><li>字节码配合解释器和编译器是最近一段时间很火的技术，比如 Java 和 Python 的虚拟机也都是基于这种技术实现的，我们把这种技术称为即时编译（JIT）</li><li>具体到 V8，就是指解释器 Ignition 在解释执行字节码的同时，收集代码信息，当它发现某一部分代码变热了之后，TurboFan 编译器便闪亮登场，把热点的字节码转换为机器码，并把转换后的机器码保存起来，以备下次使用。</li></ol></li><li>JS在执行一段代码的过程<ol><li>生成抽象语法树（AST）和执行上下文<ol><li>第一阶段是 <code>分词</code> , 如 : var a = 1, 将被分为 <code>var</code>, <code>a</code>, <code>=</code>, <code>1</code> </li><li>第二阶段是 <code>解析</code> , 又称 <code>语法分析</code> , 其作用是将上一步生成的 token 数据，根据语法规则转为 AST。<ol><li>如果源码符合语法规则，这一步就会顺利完成。</li><li>但如果源码存在语法错误，这一步就会终止，并抛出一个“语法错误”。</li></ol></li><li>生成字节码</li><li>执行代码</li></ol></li></ol></li><li>综上所述, 包括之前的知识, 对JS性能优化的总结<ol><li>提升单次脚本的执行速度，避免 JavaScript 的长任务霸占主线程，这样可以使得页面快速响应交互</li><li>避免大的内联脚本，因为在解析 HTML 的过程中，解析和编译也会占用主线程</li><li>减少 JavaScript 文件的容量，因为更小的文件会提升下载速度，并且占用更低的内存</li></ol></li><li>为什么V8代码执行时间越久，执行效率越高？<ol><li>即时编译（JIT）技术的存在</li><li>解释器执行字节码的过程中，如果发现有热点代码（HotSpot），</li><li>那么后台的编译器 TurboFan 就会把该段热点的字节码编译为高效的机器码，</li><li>然后当再次执行这段被优化的代码时，只需要执行编译后的机器码就可以了，</li><li>这样就省去了省去了字节码“翻译”为机器码的过程大大提升了代码的执行效率。</li></ol></li></ol><h1 id="浏览器中页面循环系统"><a href="#浏览器中页面循环系统" class="headerlink" title="浏览器中页面循环系统"></a>浏览器中页面循环系统</h1><h2 id="消息队列和事件循环"><a href="#消息队列和事件循环" class="headerlink" title="消息队列和事件循环"></a>消息队列和事件循环</h2><blockquote><p>JS处理代码时的顺序<br>所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。<br>主线程之外，还存在一个”任务队列”（task queue）。<br>只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。<br>一但”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。<br>那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。<br>主线程不断重复上面的第三步。<br>只要主线程空了，就会去读取”任务队列”，这就是JavaScript的运行机制。<br>这个过程会不断重复，这种机制就被称为事件循环（event loop）机制。<br>消息队列是一种数据结构，可以存放要执行的任务。它符合队列“先进先出”的特点。<br>也就是说要添加任务的话，添加到队列的尾部；要取出任务的话，从队列头部去取。</p></blockquote><ol><li>总结<ol><li>如果有一些确定好的任务，可以使用一个单线程来按照顺序处理这些任务，这是第一版线程模型</li><li>要在线程执行过程中接收并处理新的任务，就需要引入循环语句和事件系统，这是第二版线程模型。</li><li>如果要接收其他线程发送过来的任务，就需要引入消息队列，这是第三版线程模型。</li><li>如果其他进程想要发送任务给页面主线程，那么先通过 IPC 把任务发送给渲染进程的 IO 线程，IO 线程再把任务发送给页面主线程。</li><li>消息队列机制并不是太灵活，为了适应效率和实时性，引入了微任务。</li></ol></li></ol><h2 id="Web-Api"><a href="#Web-Api" class="headerlink" title="Web Api"></a>Web Api</h2><blockquote><p>setTimeout 和 XMLHttpRequest (宏任务)</p></blockquote><ol><li>setTimeout<ol><li>如果当前任务执行时间过久，会影响定时器任务的执行。</li><li>如果 setTimeout 存在嵌套调用，那么系统会设置最短时间间隔为 4 毫秒。</li><li>未激活的页面，setTimeout 执行最小间隔是 1000 毫秒。</li><li>延时执行时间有最大值。</li><li>使用 setTimeout 设置的回调函数中的 this 不符合直觉。</li></ol></li><li>XMLHttpRequest(AJAX)<ol><li>创建 XMLHttpRequest 对象。</li><li>为 xhr 对象注册回调函数。</li><li>配置基础的请求信息。</li><li>发起请求。</li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">setTimeout</span><br><span class="line">// 1.for 循环事件过长 会影响 setTimeout 的执行时间</span><br><span class="line">function bar() &#123;</span><br><span class="line">    console.log(&#x27;bar&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">function foo() &#123;</span><br><span class="line">    setTimeout(bar, 0);</span><br><span class="line">    for (let i = 0; i &lt; 5000; i++) &#123;</span><br><span class="line">        let i = 5+8+8+8</span><br><span class="line">        console.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br><span class="line">// 2. setTimeout 中 this指向 </span><br><span class="line">var name= 1;</span><br><span class="line">var MyObj = &#123;</span><br><span class="line">  name: 2,</span><br><span class="line">  showName: function()&#123;</span><br><span class="line">    console.log(this.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(MyObj.showName,1000) // 1</span><br><span class="line">// 改为 匿名函数 或者 箭头函数解决上面问题</span><br><span class="line">//箭头函数</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    MyObj.showName()</span><br><span class="line">&#125;, 1000);</span><br><span class="line">//或者function函数</span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">  MyObj.showName();</span><br><span class="line">&#125;, 1000)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// AJAX</span><br><span class="line">// 创建xhr对象</span><br><span class="line">let xhr = new XMLHttpRequest</span><br><span class="line">// 注册事件回调</span><br><span class="line">xhr.onreadystatechange = ()=&gt;&#123;&#125;</span><br><span class="line">xhr.ontimeout = (e)=&gt;&#123;&#125;</span><br><span class="line">xhr.onerror= (e)=&gt;&#123;&#125;</span><br><span class="line">// 打开请求</span><br><span class="line">xhr.open(&#x27;Get&#x27;, URL, true);</span><br><span class="line">// 发送请求</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><h2 id="微任务和宏任务"><a href="#微任务和宏任务" class="headerlink" title="微任务和宏任务"></a>微任务和宏任务</h2><blockquote><p>微任务可以在实时性和效率之间做一个有效的权衡。</p></blockquote><ol><li>宏任务<ol><li>渲染事件（如解析 DOM、计算布局、绘制）；</li><li>用户交互事件（如鼠标点击、滚动页面、放大缩小等）；</li><li>JavaScript 脚本执行事件；</li><li>网络请求完成、文件读写完成事件。</li></ol></li><li>微任务 <ol><li>把异步回调函数封装成一个宏任务，添加到消息队列尾部，当循环系统执行到该任务的时候执行回调函数。</li><li>执行时机是在主函数执行结束之后、当前宏任务结束之前执行回调函数，这通常都是以微任务形式体现的。</li></ol></li><li>结论<ol><li>微任务和宏任务是绑定的，每个宏任务在执行时，会创建自己的微任务队列。</li><li>微任务的执行时长会影响到当前宏任务的时长。比如一个宏任务在执行过程中，产生了 100 个微任务，执行每个微任务的时间是 10 毫秒，那么执行这 100 个微任务的时间就是 1000 毫秒，也可以说这 100 个微任务让宏任务的执行时间延长了 1000 毫秒。所以你在写代码的时候一定要注意控制微任务的执行时长。</li><li>在一个宏任务中，分别创建一个用于回调的宏任务和微任务，无论什么情况下，微任务都早于宏任务执行。</li></ol></li><li>每一次事件循环顺序都是宏-&gt;微-&gt;宏，每次清空当前消息队列时会检查微任务队列中是否已清空。</li></ol><h2 id="Promise、Async-Await"><a href="#Promise、Async-Await" class="headerlink" title="Promise、Async/Await"></a>Promise、Async/Await</h2><blockquote><p>Promise 解决回调地狱的问题<br>Async/Await 用同步的写法来编写异步代码</p></blockquote><ol><li>Promise<ol><li><code>.then()</code>的写法消灭嵌套调用</li><li><code>.catch()</code>合并多个错误处理</li><li><code>.race()</code> 多个请求只取最快</li><li><code>.all()</code> 等待请求全部完成</li><li><code>.finally()</code> 无论<code>resolve</code>或<code>reject</code>最后都会走到这个分支</li></ol></li><li>Async/Await<ol><li>该方法是 generator 生成器，调用 generator.next().value 的语法糖<ol><li>生成器函数是一个带星号函数，而且是可以暂停执行和恢复执行的。</li><li>在生成器函数内部执行一段代码，如果遇到 yield 关键字，那么 JavaScript 引擎将返回关键字后面的内容给外部，并暂停该函数的执行。</li><li>外部函数可以通过 next 方法恢复函数的执行。</li></ol></li><li>Async 是一个通过异步执行并隐式返回 Promise 作为结果的函数。</li></ol></li></ol><h1 id="浏览器中的页面"><a href="#浏览器中的页面" class="headerlink" title="浏览器中的页面"></a>浏览器中的页面</h1><h2 id="Chrome开发工具"><a href="#Chrome开发工具" class="headerlink" title="Chrome开发工具"></a>Chrome开发工具</h2><blockquote><p>Chrome 开发者工具（简称 DevTools）是一组网页制作和调试的工具，<br>内嵌于 Google Chrome 浏览器中。</p></blockquote><ol><li>Elements面板<ol><li>可查看DOM结果、编辑CSS样式，用于测试页面布局和设计页面。</li></ol></li><li>Console面板<ol><li>可以看成是JavaScript Shell，能执行JavaScript脚本。通过Console在页面中与JavaScript对象交互。</li></ol></li><li>Network面板<ol><li>展示页面中所有请求内容列表，能查看每项请求的请求行、请求头、请求体、时间线以及网络请求瀑布图等信息。</li><li>可根据网络请求来观察HTTP 1.1 下 当前浏览器最多支持 6 个 TCP 连接。<ol><li>把站点升级到 HTTP 2 , 可突破上述问题限制，因为 HTTP 2 的多路由复用机制。</li></ol></li></ol></li><li>Source面板<ol><li>查看Web应用加载的所有文件</li><li>编辑CSS和JavaScript文件内容</li><li>将打乱的CSS文件或者JavaScript文件格式化</li><li>支持JavaScript的调试功能</li><li>设置工作区，将更改的文件保存到本地文件夹中</li></ol></li><li>Performance面板<ol><li>记录和查看Web应用生命周期内的各种事件，并用来分析在执行过程中一些影响性能的要点。</li></ol></li><li>Memory面板<ol><li>用来查看运行过程中JavaScript占用堆内存情况，追踪是否存在内存泄露的情况等</li></ol></li><li>Application面板<ol><li>查看Web应用的数据存储情况<ol><li>PWA的基础数据</li><li>IndexedDB</li><li>Web SQL</li><li>本地和会话存储</li><li>Cookie</li><li>应用程序缓存</li><li>图像</li><li>字体和样式表</li></ol></li></ol></li><li>Security面板<ol><li>显示当前页面的一些基础安全信息</li></ol></li></ol><h2 id="JavaScript是如何影响DOM树创建的"><a href="#JavaScript是如何影响DOM树创建的" class="headerlink" title="JavaScript是如何影响DOM树创建的"></a>JavaScript是如何影响DOM树创建的</h2><blockquote><p>从网络传给渲染引擎的 HTML 文件字节流是无法直接被渲染引擎理解的，<br>所以要将其转化为渲染引擎能够理解的内部结构，这个结构就是 DOM。<br>DOM 提供了对 HTML 文档结构化的表述。</p></blockquote><ol><li>在渲染引擎中，DOM 有三个层面的作用。<ol><li>从页面的视角来看，DOM 是生成页面的基础数据结构。</li><li>从 JavaScript 脚本视角来看，DOM 提供给 JavaScript 脚本操作的接口，通过这套接口，JavaScript 可以对 DOM 结构进行访问，从而改变文档的结构、样式和内容。</li><li>从安全视角来看，DOM 是一道安全防护线，一些不安全的内容在 DOM 解析阶段就被拒之门外了。</li></ol></li><li>DOM 树如何生成<ol><li>首先确认一个观念，HTML 解析器并不是等整个文档加载完成之后再解析的，而是网络进程加载了多少数据，HTML 解析器便解析多少数据。</li><li>网络进程接受到响应头之后，会根据响应头中的 <code>content-type</code> 字段判断文件类型，如果值为<code>text/html</code>，浏览器会判断这是一个HTML类型，然后为该请求<strong>选择或创建一个渲染进程</strong>。</li><li>渲染进程准备好之后，<strong>网络进程和渲染进程之间会建立一个共享数据的管道</strong>，网络进程接收到数据后就往这个管道里面放，而渲染进程则从管道的另外一端不断地读取数据，解析器就将收到的字节流解析为DOM。</li></ol></li><li>DOM形成的详细过程<ol><li>第一个阶段，通过分词器将字节流转换为 Token。<ol><li>如果压入到栈中的是 StartTag Token，HTML 解析器会为该 Token 创建一个 DOM 节点，然后将该节点加入到 DOM 树中，它的父节点就是栈中相邻的那个元素生成的节点。</li><li>如果分词器解析出来是文本 Token，那么会生成一个文本节点，然后将该节点加入到 DOM 树中，文本 Token 是不需要压入到栈中，它的父节点就是当前栈顶 Token 所对应的 DOM 节点。</li><li>如果分词器解析出来的是 EndTag 标签，比如是 EndTag div，HTML 解析器会查看 Token 栈顶的元素是否是 StarTag div，如果是，就将 StartTag div 从栈中弹出，表示该 div 元素解析完成。</li></ol></li><li>至于后续的第二个和第三个阶段是同步进行的，需要将 Token 解析为 DOM 节点，并将 DOM 节点添加到 DOM 树中。</li></ol></li><li>JavaScript 是如何影响 DOM 生成的<ol><li>内联 <code>&lt;script&gt;console.log(1)&lt;/script&gt;</code> 会阻塞DOM树的形成。</li><li>标签内插入下载的JS文件 <code>&lt;script type=&quot;text/javascript&quot; src=&#39;foo.js&#39;&gt;&lt;/script&gt;</code></li></ol></li></ol><h2 id="CSS如何影响首次加载时的白屏时间"><a href="#CSS如何影响首次加载时的白屏时间" class="headerlink" title="CSS如何影响首次加载时的白屏时间"></a>CSS如何影响首次加载时的白屏时间</h2><blockquote><p>当渲染进程接收 HTML 文件字节流时，会先开启一个预解析线程，<br>如果遇到 JavaScript 文件或者 CSS 文件，那么预解析线程会提前下载这些数据。</p></blockquote><ol><li>CSSOM 的作用<ol><li>提供给 JavaScript 操作样式表的能力。</li><li>为布局树的合成提供基础的样式信息。</li></ol></li><li>影响页面展示的因素<ol><li>主要原因就是渲染流水线影响到了首次页面展示的速度。</li><li>视觉上经历的3个阶段<ol><li>等请求发出去之后，到提交数据阶段，这时页面展示出来的还是之前页面的内容。</li><li>提交数据之后渲染进程会创建一个空白页面，我们通常把这段时间称为解析白屏，并等待 CSS 文件和 JavaScript 文件的加载完成，生成 CSSOM 和 DOM，然后合成布局树，最后还要经过一系列的步骤准备首次渲染。</li><li>等首次渲染完成之后，就开始进入完整页面的生成阶段了，然后页面会一点点被绘制出来。</li></ol></li><li>优化策略<ol><li>通过内联 JavaScript、内联 CSS 来移除这两种类型的文件下载，这样获取到 HTML 文件之后就可以直接开始渲染流程了。</li><li>但并不是所有的场合都适合内联，那么还可以尽量减少文件大小，比如通过 webpack 等工具移除一些不必要的注释，并压缩 JavaScript 文件。</li><li>还可以将一些不需要在解析 HTML 阶段使用的 JavaScript 标记上 sync 或者 defer。</li><li>对于大的 CSS 文件，可以通过媒体查询属性，将其拆分为多个不同用途的 CSS 文件，这样只有在特定的场景下才会加载特定的 CSS 文件。</li></ol></li></ol></li></ol><h2 id="为什么CSS动画比JavaScript动高效"><a href="#为什么CSS动画比JavaScript动高效" class="headerlink" title="为什么CSS动画比JavaScript动高效?"></a>为什么CSS动画比JavaScript动高效?</h2><blockquote><p>因为 <code>will-change</code> 属性的存在，<br>使得浏览器在解析 CSS 文件时会<strong>具有该属性的元素</strong>提前分层，<br>后续仅仅只在渲染主进程内的<strong>合成线程</strong>进行合成，该方法是效率最高的，<br>JavaScript修改元素样式，可能会引起 <strong>重排或重绘</strong> 皆是效率最低的。</p></blockquote><ol><li>显示器如何显示图像<ol><li>前缓冲区 : 每秒固定读取 60 次前缓冲区中的图像，并将读取的图像显示到显示器上。</li><li>后缓冲区 : 显卡的职责就是合成新的图像，并将图像保存到后缓冲区中。</li></ol></li><li>帧和帧率<ol><li>帧 : 一张图片理解为帧。</li><li>帧率 : 1s 内更新帧数的频率，如，1s内更新60帧，帧率为60Hz(60FPS)。</li></ol></li><li>如何生成一帧图像，通常渲染路径越长，生成图像花费的时间就越多。<ol><li>重排 : 需要重新根据 CSSOM 和 DOM 来计算布局树，这样生成一幅图片时，会让整个渲染流水线的每个阶段都执行一遍，如果布局复杂的话，就很难保证渲染的效率了。</li><li>重绘 : 没有了重新布局的阶段，操作效率稍微高点，但是依然需要重新计算绘制信息，并触发绘制操作之后的一系列操作。</li><li>合成 : 操作的路径就显得非常短了，并不需要触发布局和绘制两个阶段，如果采用了 GPU，那么合成的效率会非常高。<ol><li>分层和合成 : 为了提升每帧的渲染效率，Chrome 引入了分层和合成的机制。<ol><li>分层 : 将素材分解为多个图层称为分层，分层体现在生成布局树之后。</li><li>合成 : 将这些图层合并到一起称为合成，合成操作是在合成线程上完成的，这也就意味着在执行合成操作时，是不会影响到主线程执行的。</li></ol></li><li>分块 : 合成线程会将每个图层分割为大小固定的图块，然后优先绘制靠近视口的图块，这样就可以大大加速页面的显示速度。</li></ol></li><li>如何利用分层技术优化代码<ol><li><code>will-change</code> 属性，通过例子可以观察到，在chrome devtools的 performance面板、layers面板中可以观察到 <strong>具有该属性的元素会被提前分层成为单独的一帧图片</strong> 从而使得元素不需要重排或重绘，提高了动画合成的效率，但是该操作会占用相对大的内存，根据不同情况下考量何时使用该属性。</li></ol></li></ol></li></ol><h2 id="如何系统的优化页面"><a href="#如何系统的优化页面" class="headerlink" title="如何系统的优化页面"></a>如何系统的优化页面</h2><blockquote><p>页面优化即让页面更快的显示和响应。<br>一个页面有三个阶段:加载阶段、交互阶段、关闭阶段。<br>加载阶段：请求发出到渲染完整页面，影响因素有<code>网络</code>和<code>JavaScript脚本</code>。<br>交互阶段：页面加载完成到用户交互，影响因素主要是<code>JavaScript脚本</code>。<br>关闭阶段：主要是用户发出关闭指令后页面的一些清理操作。</p></blockquote><ol><li>加载阶段<ol><li>造成阻塞：JS文件、首次加载的HTML文件、CSS文件等。</li><li>不会造成阻塞：图片、视频、音频等资源。</li><li>造成阻塞的原因<ol><li>关键资源个数</li><li>关键资源大小</li><li>请求关键资源需要多少个RTT（round trip time）</li></ol></li><li>优化策略<ol><li>减少关键资源个数，使用如内联css和内联javascript</li><li>减小关键资源大小，去除css重复代码，javascript文件中注释和重复代码</li><li>减少rtt次数，一次rtt最多14kb的数据包传输，减小css和html和js文件体积大小。</li></ol></li></ol></li><li>交互阶段：主要考虑重排、重绘<ol><li>减少JS执行时间<ol><li>一次执行的函数分解为多步操作</li><li>使用 <code>web worker</code> 进行非dom操作的逻辑处理</li></ol></li><li>避免强制同步布局<ol><li>css计算属性是在单独的任务中进行的</li><li>如mwui-vue中处理nav组件的动画使用到了js使css强制计算当前元素的css属性.</li></ol></li><li>避免布局抖动</li><li>合理利用css合成动画(will-change属性)</li><li>避免频繁垃圾回收(尽可能减少闭包的使用)</li></ol></li></ol><h2 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h2><blockquote><p>如果通过JS脚本直接修改DOM的话，会引起如，重排、重绘、合成，甚至因为不当操作，还会引起如，布局抖动和强制同步布局等一系列的操作。所以虚拟DOM，改进了上述的问题。</p></blockquote><ol><li>虚拟DOM<ol><li>虚拟dom做了什么<ol><li>将页面变更内容应用到虚拟DOM上，而不是直接修改DOM。</li><li>数据变化时，生成新的虚拟DOM，对比新旧虚拟DOM，找出变化的节点。</li><li>数据停止变化后，渲染到DOM上，更新页面</li></ol></li></ol></li><li>几种设计模式<ol><li>双缓存<ol><li>虚拟DOM，类似双缓存中的Buffer（缓存）</li></ol></li><li>MVC<ol><li>Model（数据层）、View（视图层）、Controller（逻辑处理层）</li></ol></li></ol></li><li>react中的具体流程<ol><li>Controller 监控 DOM 变化，DOM变化，Controller 通知 Model 更新数据。</li><li>Model 更新数据后，Controller通知 View ，告知数据发生改变。</li><li>View 接受更新消息后，生成新的虚拟DOM。</li><li>新虚拟DOM生成好后，与旧的虚拟DOM比较（diff），找出变化节点。</li><li>react此时将变化节点应用到DOM上，触发DOM节点的更新。</li><li>DOM 节点的变化又会触发后续一系列渲染流水线的变化，从而实现页面的更新。</li></ol></li></ol><h1 id="浏览器中的网络"><a href="#浏览器中的网络" class="headerlink" title="浏览器中的网络"></a>浏览器中的网络</h1><h2 id="HTTP-1"><a href="#HTTP-1" class="headerlink" title="HTTP/1"></a>HTTP/1</h2><blockquote><p>HTTP 是浏览器中最重要且使用最多的协议，是浏览器和服务器之间的通信语言，也是互联网的基石。</p></blockquote><ol><li>HTTP/0.9<ol><li>请求过程<ol><li>客户端先要根据 IP 地址、端口和服务器建立 TCP 连接，而建立连接的过程就是 TCP 协议三次握手的过程。</li><li>建立好连接之后，会发送一个 GET 请求行的信息。</li><li>服务器接收请求信息之后，读取对应文件，并将数据以ASCII字符流返回给客户端</li><li>传输完成后，断开连接。</li></ol></li><li>3个特点<ol><li>只有一个请求行，并没有 HTTP 请求头和请求体，因为只需要一个请求行就可以完整表达客户端的需求了。</li><li>服务器也没有返回头信息，这是因为服务器端并不需要告诉客户端太多信息，只需要返回数据就可以了。</li><li>返回的文件内容是以 ASCII 字符流来传输的，因为都是 HTML 格式的文件，所以使用 ASCII 字节码来传输是最合适的。</li></ol></li></ol></li><li>HTTP/1.0 解决HTTP/0.9不支持多种不同类型的数据处理的问题.<ol><li>首先，浏览器需要知道服务器返回的数据是什么类型，然后浏览器才能根据不同的数据类型做针对性的处理。</li><li>其次，服务器会对数据进行压缩后再传输，所以浏览器需要知道服务器压缩的方法。</li><li>再次，浏览器告诉服务器它想要什么语言版本的页面。</li><li>最后，浏览器需要知道文件的编码类型。</li><li>以上问题皆需要通过设置请求头去设置。</li></ol></li><li>HTTP/1.1 相比较HTTP/1.0的改进。<ol><li>改进持久连接，HTTP/1.1 中增加了持久连接的方法，它的特点是在一个 TCP 连接上可以传输多个 HTTP 请求，只要浏览器或者服务器没有明确断开连接，那么该 TCP 连接会一直保持。</li><li>不成熟的 HTTP 管线化，TCP内只要有一段数据包传输出错，就会造成队头阻塞。</li><li>提供虚拟主机的支持</li><li>对动态生成的内容提供了完美支持</li><li>客户端 Cookie、安全机制</li></ol></li></ol><h2 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP/2"></a>HTTP/2</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近在极客时间学习&lt;code&gt;&amp;lt;浏览器工作原理&amp;gt;&lt;/code&gt;一课的一些笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;开篇词的学习&quot;&gt;&lt;a href=&quot;#开篇词的学习&quot; class=&quot;headerlink&quot; title=&quot;开</summary>
      
    
    
    
    
    <category term="浏览器" scheme="http://yoursite.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>V8 引擎的学习</title>
    <link href="http://yoursite.com/2020/08/15/%E5%9B%BE%E8%A7%A3GoogleV8/"/>
    <id>http://yoursite.com/2020/08/15/%E5%9B%BE%E8%A7%A3GoogleV8/</id>
    <published>2020-08-15T08:04:38.000Z</published>
    <updated>2021-02-08T07:55:09.079Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在极客时间学习<code>&lt;图解 Google V8&gt;</code>一课的一些笔记</p></blockquote><h1 id="宏观视角"><a href="#宏观视角" class="headerlink" title="宏观视角"></a>宏观视角</h1><h2 id="开篇词"><a href="#开篇词" class="headerlink" title="开篇词"></a>开篇词</h2><blockquote><p>V8 是 JavaScript 虚拟机的一种。我们可以简单地把 JavaScript 虚拟机理解成是一个翻译程序，将人类能够理解的编程语言 JavaScript，翻译成机器能够理解的机器语言。</p></blockquote><ol><li>V8执行代码流水线使用到的技术<ol><li>隐藏类:将 JavaScript 中动态类型转换为静态类型的一种技术，可以消除动态类型的语言执行速度过慢的问题</li><li>惰性解析:为了加速代码的启动速度，通过对惰性解析机制的学习，你可以优化你的代码更加适应这个机制，从而提高程序性能。</li><li>事件循环系统和垃圾回收机制。</li></ol></li></ol><h2 id="V8如何执行一段JS代码"><a href="#V8如何执行一段JS代码" class="headerlink" title="V8如何执行一段JS代码"></a>V8如何执行一段JS代码</h2><blockquote><p>V8 是一个由 Google 开发的开源 JavaScript 引擎，目前用在 Chrome 浏览器和 Node.js 中，其核心功能是执行易于人类理解的 JavaScript 代码。<br>很多浏览器有自己的 JavaScript 引擎，如苹果公司在 Safari 中就是用 JavaScriptCore 虚拟机，Firefox 使用了 TraceMonkey 虚拟机，而 Chrome 则使用了 V8 虚拟机。</p></blockquote><ol><li>什么是V8<ol><li>V8是一个虚拟计算机，也称虚拟机。虚拟机通过模拟实际计算机的各种功能来实现代码的执行。如CPU、堆栈、寄存器等。</li></ol></li><li>高级代码为什么需要先编译再执行？CPU无法识别高级语言所输出的代码。<ol><li>CPU是如何识别代码的<ol><li>CPU执行操作是根据指令集来的</li><li>与CPU沟通是通过二进制代码实现的</li><li>指令集就是机器语言</li></ol></li><li>高级语言无法直接与CPU交流，因此需要解析执行。<ol><li>解释执行<ol><li>源代码被解析器编译为中间代码</li><li>中间代码被解释器解释</li><li>输出结果</li></ol></li><li>编译执行<ol><li>源代码被解析器编译为中间代码</li><li>中间代码被编译器编译为机器代码</li><li>机器执行机器代码</li><li>输出结果</li></ol></li></ol></li></ol></li><li>V8是如何执行JavaScript代码的? 通过混合编译执行和解释执行两种手段执行的(JIT)<ol><li>准备执行JavaScript的基础环境<ol><li>JavaScript 全局执行上下文就包含了执行过程中的全局信息，比如一些内置函数，全局变量等信息；</li><li>全局作用域包含了一些全局变量，在执行过程中的数据都需要存放在内存中；</li><li>而 V8 是采用了经典的堆和栈的内存管理模式，所以 V8 还需要初始化内存中的堆和栈结构；</li><li>另外，想要我们的 V8 系统活起来，还需要初始化消息循环系统，消息循环系统包含了消息驱动器和消息队列，它如同 V8 的心脏，不断接受消息并决策如何处理消息。</li></ol></li><li>结构化代码字符串，结构化:词法分析。</li><li>抽象语法树(AST)，便于V8理解的结构。</li><li>生成字节码。字节码：介于AST与机器代码间的代码。</li><li>解释器按照字节码顺序解释字节码。</li></ol></li></ol><h1 id="JavaScript设计思想"><a href="#JavaScript设计思想" class="headerlink" title="JavaScript设计思想"></a>JavaScript设计思想</h1><h2 id="函数即对象"><a href="#函数即对象" class="headerlink" title="函数即对象"></a>函数即对象</h2><blockquote><p>JavaScript 中的函数就是一种特殊的对象，我们把 JavaScript 中的函数称为一等公民 (First Class Function)。</p></blockquote><ol><li>什么是JavaScript对象<ol><li>原始类型:string,number,boolean,undefined,null,symbol,bigInt</li><li>对象类型:object</li><li>函数类型:对象的方法,如,a.speak()</li></ol></li><li>函数的本质<ol><li>name属性记录函数名</li><li>code属性记录函数体</li></ol></li><li>函数是一等公民</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近在极客时间学习&lt;code&gt;&amp;lt;图解 Google V8&amp;gt;&lt;/code&gt;一课的一些笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;宏观视角&quot;&gt;&lt;a href=&quot;#宏观视角&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    
    <category term="浏览器" scheme="http://yoursite.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Vue的一些东西</title>
    <link href="http://yoursite.com/2019/04/09/Vue%E7%9A%84%E4%B8%80%E4%BA%9B%E4%B8%9C%E8%A5%BF/"/>
    <id>http://yoursite.com/2019/04/09/Vue%E7%9A%84%E4%B8%80%E4%BA%9B%E4%B8%9C%E8%A5%BF/</id>
    <published>2019-04-09T06:42:38.000Z</published>
    <updated>2021-02-08T07:55:08.712Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>编写轮子的过程中遇到的问题与总结,<br>轮子项目地址:<a href="https://github.com/o0Chivas0o/my-wheel">https://github.com/o0Chivas0o/my-wheel</a></p></blockquote><h3 id="—2019-04-09—"><a href="#—2019-04-09—" class="headerlink" title="—2019-04-09—"></a>—2019-04-09—</h3><ol><li>Vue组件中Props的变量接受类型可以是指定单个或多个类型.props具体属性可查看vue官方文档:<a href="https://cn.vuejs.org/v2/guide/components-props.html">https://cn.vuejs.org/v2/guide/components-props.html</a> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//  props有2种写法:</span><br><span class="line">1.</span><br><span class="line">props:&#123;</span><br><span class="line">    xxx:&#123;</span><br><span class="line">        type:[String,Number]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">2.</span><br><span class="line">props:[&#x27;xxx&#x27;]</span><br></pre></td></tr></table></figure></li><li>组件中name属性建议规范命名,便于调试 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//通过 this.$option.name 可以获取到当前组件的名字</span><br></pre></td></tr></table></figure></li></ol><h3 id="—2019-06-17—"><a href="#—2019-06-17—" class="headerlink" title="—2019-06-17—"></a>—2019-06-17—</h3><ol><li>props中的default的值如果是对象或者数组,需要用函数return一个对象或数组 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">    object:&#123;</span><br><span class="line">        type:Object,</span><br><span class="line">        default:() =&gt; &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                a:&#x27;1&#x27;,</span><br><span class="line">                b:&#x27;2&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    array:&#123;</span><br><span class="line">        type:Array,</span><br><span class="line">        default:() =&gt; &#123;</span><br><span class="line">            return [</span><br><span class="line">                &#x27;a&#x27;,&#x27;b&#x27;,&#x27;c</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/>### ---2019-07-02---</li></ol><ul><li><p>vue 默认合并 :style 和 class里的东西</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;w-tabs class=&#x27;lee&#x27;&gt;&lt;/w-tabs&gt;</span><br><span class="line">// html 中 class 为 class=&#x27;tabs lee&#x27;</span><br></pre></td></tr></table></figure></li><li><p>.sync的用法</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;w-tabs :selected.sync=&quot;selectedTab&quot;&gt;</span><br><span class="line">&lt;w-tabs selected=&quot;selectedTab&quot;  @update:selected=&quot;selectedTab = $event&quot;&gt;</span><br><span class="line">// 两种写法是等价的</span><br></pre></td></tr></table></figure></li><li><p> vue 的事件不会冒泡</p></li><li><p> css中<code>margin-left:auto</code>可将元素放置在最右</p></li><li><p>porps 与 data的区别</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">prop:需要用户传值</span><br><span class="line">data:不需要用户传值</span><br><span class="line"></span><br><span class="line">function fn(prop1,prop2)&#123;</span><br><span class="line">    var data1 = prop1</span><br><span class="line">    data1 = 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过<code>provide</code>和<code>inject</code> API完成<code>eventBus</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//top-level</span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">export default&#123;</span><br><span class="line">...</span><br><span class="line">data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        eventBus:new Vue(),</span><br><span class="line">        yyy:false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">provide:&#123;</span><br><span class="line">        eventBus:this.eventBus</span><br><span class="line">    &#125;,</span><br><span class="line">mounted()&#123;</span><br><span class="line">        this.eventBus.$emit(&#x27;update:xxx&#x27;,this.yyy)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//rest of level</span><br><span class="line">export default&#123;</span><br><span class="line">...</span><br><span class="line">inject:[&#x27;eventBus&#x27;],</span><br><span class="line">created()&#123;</span><br><span class="line">        this.eventBus.$on(&#x27;update:xxx&#x27;,()=&gt;&#123;</span><br><span class="line">        // 通过回调来改变值或进行其他操作</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>组件生成过程中使用<code>mounted</code>钩子函数进行后续操作,因为<code>created</code>并不能确定组件是否完全生成</p><br/><br/>### ---2019-07-03---</li><li><p><code>this.$children</code>的操作,只能获取到组件内的 <em><strong>子组件</strong></em> ,并不能获取到组件内的 <em><strong>子元素</strong></em></p><br/><br/> ### ---2019-07-04---</li><li><p>编写<code>popover</code>组件的思路,</p><ul><li>点击<code>button</code>使其展示或关闭,此方法仅能通过按钮来展示或关闭,满足不了更多的需求且有bug.  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;popover&quot; @click=&quot;xxx&quot;&gt;</span><br><span class="line">    &lt;div class=&#x27;content-wrapper&#x27; v-if=&quot;visible&quot;&gt;</span><br><span class="line">        &lt;slot name=&#x27;content&#x27;&gt;&lt;/slot&gt; // 等价展示内容</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;slot&gt;&lt;slot&gt; // 等价按钮</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">// 靠变量visible使其关闭或显示</span><br><span class="line">&lt;script&gt;</span><br><span class="line">...</span><br><span class="line">data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        visible:false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">    xxx()&#123;</span><br><span class="line">        this.visible = !this.visible</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li>使其点击 <em><strong>body元素</strong></em> 就能关闭popove  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// 接上段代码,更改methods中的xxx函数</span><br><span class="line">xxx()&#123;</span><br><span class="line">    this.visible = !this.visible</span><br><span class="line">    if(this.visible)&#123;</span><br><span class="line">        document.addEventListener(&#x27;click&#x27;,()=&gt;&#123;</span><br><span class="line">            this.visible = false</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 然而以上代码会产生几个bug</span><br><span class="line">// 1. 监听器并没有删除,点击一次监听器在增加一个</span><br><span class="line">// 2. 监听是同时进行的,当visible变为ture的瞬间,监听器便将其值更改为false,所以页面中看不到visible</span><br><span class="line">// 3. 需要使用this.$nextTick或者setTimeout 来使其是异步操作</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 完善以上代码</span><br><span class="line"> xxx()&#123;</span><br><span class="line">    this.visible = !this.visible</span><br><span class="line">    if(this.visible)&#123;</span><br><span class="line">    // 这个操作是因为</span><br><span class="line">    // 1. 箭头函数不具名</span><br><span class="line">    // 2. 如果修改为function x()&#123;&#125;.bind(this) 会新生成另一个函数,与x函数不同,所以提出来这样写</span><br><span class="line">        let x = () =&gt; &#123;</span><br><span class="line">            this.visible = false</span><br><span class="line">            document.removeEventListener(&#x27;click&#x27;,x)</span><br><span class="line">        &#125;</span><br><span class="line">        this.$nextTick(()=&gt;&#123;</span><br><span class="line">            document.addEventListener(&#x27;click&#x27;,x)</span><br><span class="line">        &#125;)    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 此时点击外层的document元素也能使其关闭内容展示</span><br></pre></td></tr></table></figure></li><li>但是用户如果需要复制popover弹出层的内容,而这段代码不能满足该需求,所以修改如下结构.  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    // vue中给@click事件添加修饰符.stop便阻止冒泡,仅添加这一项便能满足如下需求</span><br><span class="line">    &lt;div class=&quot;popover&quot; @click.stop=&quot;xxx&quot;&gt;</span><br><span class="line">        &lt;div class=&#x27;content-wrapper&#x27; v-if=&quot;visible&quot; @click.stop&gt;</span><br><span class="line">            &lt;slot name=&#x27;content&#x27;&gt;&lt;/slot&gt; // 等价展示内容</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;slot&gt;&lt;slot&gt; // 等价按钮</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    </span><br><span class="line">    // 靠变量visible使其关闭或显示</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    ...</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            visible:false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        xxx()&#123;</span><br><span class="line">            this.visible = !this.visible</span><br><span class="line">            let x = () =&gt; &#123;</span><br><span class="line">                this.visible = false</span><br><span class="line">                document.removeEventListener(&#x27;click&#x27;,x)</span><br><span class="line">            &#125;</span><br><span class="line">            this.$nextTick(()=&gt;&#123;</span><br><span class="line">                document.addEventListener(&#x27;click&#x27;,x)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><br/>    </li></ul></li></ul><h3 id="—2019-07-08—"><a href="#—2019-07-08—" class="headerlink" title="—2019-07-08—"></a>—2019-07-08—</h3><ul><li><code>popover</code>组件,还需要注意几点.<ul><li>点击按钮开启,点击其他位置只关闭一次.(事件监听)</li><li>popover显示内容,不能被具有<code>overflow:hidden</code>属性的元素遮挡,解决办法很简单,通过<code>$refs.popoverContent</code>找到popover显示内容,并通过<code>document.body.appendChild(popoverContent)</code>插入到body中.</li><li>在寻找popover的位置时,如果页面出现滚动条,还会出现位置不正确的bug,需要在定位的同时,加上scroll的距离,例如:<code>this.$refs.contentWrapper.style.left = left + window.scrollX + &#39;px&#39;</code>,该情况下是x方向出现滚动条的定位.</li></ul></li></ul><br/>### ---2019-07-09---- 在编写某些标签上的自定义属性,如果用到拼接字符串,需用双引号包起来,如:    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;use :xlink:href=&quot;`#i-$&#123;name&#125;`&quot;&gt;&lt;/use&gt;</span><br><span class="line">// 在页面渲染时,通常都需要一些工具或者api进行转义,通常是用正则来匹配引号中的东西去渲染,如果不这样写会造成转义的问题</span><br></pre></td></tr></table></figure><h3 id="—2019-07-15—"><a href="#—2019-07-15—" class="headerlink" title="—2019-07-15—"></a>—2019-07-15—</h3><ul><li>递归组件的几种写法.  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">  //以cascader组件为例子</span><br><span class="line">  </span><br><span class="line">  // 1. 以组件中name为标识,通过组件name递归引用自身</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">      &lt;div class=&quot;cascader-item&quot;&gt;</span><br><span class="line">           &#123;&#123;sourceItem.name&#125;&#125;</span><br><span class="line">           &lt;w-cascader-item</span><br><span class="line">           v-if=&quot;sourceItem.children&quot;</span><br><span class="line">           v-for=&quot;item in sourceItem.children&quot;</span><br><span class="line">           :sourceItem=&quot;item&quot;&gt;&lt;/w-cascader-item&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">  export default  &#123;</span><br><span class="line">      name: &#x27;WCascaderItem&#x27;,</span><br><span class="line">      props: &#123;</span><br><span class="line">          sourceItem: &#123;type: Object&#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  // 2. 以下形式</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">      &lt;div class=&quot;cascader-item&quot;&gt;</span><br><span class="line">           &#123;&#123;sourceItem.name&#125;&#125;</span><br><span class="line">           &lt;w-cascader-item</span><br><span class="line">           v-if=&quot;sourceItem.children&quot;</span><br><span class="line">           v-for=&quot;item in sourceItem.children&quot;</span><br><span class="line">           :sourceItem=&quot;item&quot;&gt;&lt;/w-cascader-item&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">  const WCascadearItem = &#123;</span><br><span class="line">      name: &#x27;WCascaderItem&#x27;,</span><br><span class="line">      components:&#123;WCascadearItem&#125;,</span><br><span class="line">      props: &#123;sourceItem: &#123;type: Object&#125;&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  export default WCascadearItem</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  // 上述两种形式都需要在父组件中 import 该组件, 并添加components属性使用该组件.</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>scss <code>@mixin</code> 和 <code>placeholder</code> 的区别<ul><li><code>@mixin</code> 会将属性重复写在被选择器选中的元素内(重复写属性)</li><li><code>placeholder</code> 会将选择器提取出来写在属性前(不会重复) </li></ul></li></ul><h3 id="—2019-07-17—"><a href="#—2019-07-17—" class="headerlink" title="—2019-07-17—"></a>—2019-07-17—</h3><ul><li>编写组件需要用到数组记录的过程当中需注意:<ul><li>vue是不允许直接修改数组的,需要使用<code>this.$set(target,index,value)</code>这样的api来动态修改数组内的值</li><li>或者使用<code>this.target.push()</code>或者<code>this.target.splice()</code>等数组方法来间接修改数组内的值.</li><li>切记勿使用<code>this.array = value</code>来修改值</li><li><a href="https://cn.vuejs.org/v2/guide/reactivity.html">参考-深入响应式原理</a></li></ul></li><li>vue编写组件,<em><strong>不允许</strong></em> 子组件 <em><strong>直接</strong></em> 修改props的值</li><li>组件的编写尽量单项数据流的思路去做,省去很多麻烦</li></ul><h3 id="—2019-07-19—"><a href="#—2019-07-19—" class="headerlink" title="—2019-07-19—"></a>—2019-07-19—</h3><ul><li>Vue自定义指令<ul><li>组件如果需要操作dom,尽量封装到Vue指令中,<code>v-xxx</code>这种</li><li>具体编写查看vue文档,下面是cascader轮子中用到的自定义指令:</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// click-outside.js</span><br><span class="line">let onClickDocument = (e) =&gt; &#123;</span><br><span class="line">    let &#123;target&#125; = e</span><br><span class="line">    callbacks.forEach((item) =&gt; &#123;</span><br><span class="line">        if (target === item.el || item.el.contains(target)) &#123;return&#125;</span><br><span class="line">        item.callback()</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line">// cascader.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;cascader&quot; ref=&quot;cascader&quot; v-click-outside=&quot;close&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">            </span><br><span class="line">import ClickOutside from &#x27;./click-outside&#x27;</span><br><span class="line">export defalut &#123;</span><br><span class="line">...</span><br><span class="line">directives: &#123;ClickOutside&#125;,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="—2019-07-22—"><a href="#—2019-07-22—" class="headerlink" title="—2019-07-22—"></a>—2019-07-22—</h3><ul><li>vue动画<ul><li> transition 动画</li><li> CSS animation 动画 (可搭配animate.css使用)</li><li> JS 操作动画  (volocity.js 库使用 2.0.0版本以上可能存在问题)</li><li> 条件渲染时,在渲染元素需要加上<code>key</code>,transition标签加<code>mode</code></li></ul></li></ul><h3 id="—2019-08-08—"><a href="#—2019-08-08—" class="headerlink" title="—2019-08-08—"></a>—2019-08-08—</h3><ul><li>vue中 $children 如果是通过 slot 这种方式渲染的 不会马上拿到</li></ul><h3 id="—2019-08-10—"><a href="#—2019-08-10—" class="headerlink" title="—2019-08-10—"></a>—2019-08-10—</h3><ul><li>移动端 获取用户手指坐标(touchstart事件),通过e.touches[0]来获取第一个手指的坐标</li></ul><h3 id="—2019-08-12—"><a href="#—2019-08-12—" class="headerlink" title="—2019-08-12—"></a>—2019-08-12—</h3><ul><li>vue.config.js 文件中 如若有修改路径目录的东西,需按以下写</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;)            </span><br><span class="line">module.export = &#123;</span><br><span class="line">    css:&#123;</span><br><span class="line">        includePath:[path.join(__dirname,&#x27;src&#x27;)]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">__dirname 是当前项目的目录</span><br><span class="line">src 是引用文件所在目录</span><br><span class="line">不用`$&#123;__dirname&#125;/src`写法,是因为windows下,路径可能是 &#x27;//&#x27; 这种</span><br></pre></td></tr></table></figure><h3 id="—2019-08-20—"><a href="#—2019-08-20—" class="headerlink" title="—2019-08-20—"></a>—2019-08-20—</h3><blockquote><p>v-if 和 v-show的区别</p></blockquote><ol><li>v-if让元素不出现在页面,而v-show则元素一直在页面.</li><li>v-if 为 true 时 元素 create 当 v-if 为false 时 元素 destory,而v-show 只改变style,并没有生命周期</li></ol><h3 id="—2019-08-22—"><a href="#—2019-08-22—" class="headerlink" title="—2019-08-22—"></a>—2019-08-22—</h3><blockquote><p>浏览器会合并css属性,例如:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">el.style.height = 0 </span><br><span class="line">el.style.height = `120px`</span><br><span class="line">这样浏览器会认为你要的是120px的高度,在vue中使用动画钩子函数,会使动画失效</span><br><span class="line">此时加上 el.getBoundingClientRect()去强制计算高度</span><br><span class="line">这样动画就不会失效</span><br></pre></td></tr></table></figure><h3 id="—2019-08-26—"><a href="#—2019-08-26—" class="headerlink" title="—2019-08-26—"></a>—2019-08-26—</h3><blockquote><p>表单验证有两种,及时验证,异步验证,参考<code>validate.js</code></p></blockquote><ol><li>及时验证<ol><li>邮箱正则 <code>/^.+@.+$/</code></li><li>手机 <code>/\d&#123;10&#125;</code> 或 <code>/\d&#123;11&#125;</code></li></ol></li><li>异步验证<ol><li>需要用到查询数据的</li></ol></li></ol><blockquote><p>一个关于引用类型的知识点 具体参考:<a href="https://segmentfault.com/a/1190000006769676">https://segmentfault.com/a/1190000006769676</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">let a = &#123;&#125;</span><br><span class="line">ensureObject(a.x)</span><br><span class="line">a.x // undefined</span><br><span class="line">ensureObject(a,x)</span><br><span class="line">a.x // &#123;&#125;</span><br><span class="line">    </span><br><span class="line">用var操作符定义的变量将成为作用域中的局部变量。就是说函数中 使用var定义一个变量，这个变量在函数退出后就会被销毁。</span><br><span class="line">    </span><br><span class="line">基本类型：存储在栈（stack）中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。</span><br><span class="line">引用类型：存储在堆中的对象，也就是说，存储在变量处的值是一个指针，指向堆中的对象。</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">// 错误的</span><br><span class="line">function ensureObject (obj) &#123;</span><br><span class="line">    if (typeof obj !== &#x27;object&#x27;) &#123;</span><br><span class="line">        obj = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">// 正确的</span><br><span class="line">function ensureObject (obj, key) &#123;</span><br><span class="line">    if (typeof obj[key] !== &#x27;object&#x27;) &#123;</span><br><span class="line">        obj[key] = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="—2019-09-17—"><a href="#—2019-09-17—" class="headerlink" title="—2019-09-17—"></a>—2019-09-17—</h3><blockquote><p>uploader 组件 涉及到简单的node.js构建的静态服务器,其中有一些需要注意的地方</p></blockquote><h3 id="—2020-07-20—"><a href="#—2020-07-20—" class="headerlink" title="—2020-07-20—"></a>—2020-07-20—</h3><blockquote><p>发现table组件 并不能在 column 中 添加标签 如 a 标签进行其他操作,于是修改结构,将table自身column 属性,更改为 table-column 组件 , 通过 slot 来构建table 的 column , 其中发现需要声明一个组件来完成该操作.</p></blockquote><ol><li>需要构建一个组件来渲染子组件中的html标签</li><li>外层引用 需要用到 slot-scope 的属性</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;template v-if=&quot;column.render&quot;&gt;</span><br><span class="line">        &lt;vnodes :vnodes=&quot;column.render(&#123;value: item[column.field]&#125;)&quot;&gt;&lt;/vnodes&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template v-else&gt;</span><br><span class="line">        &#123;&#123;item[column.field]&#125;&#125;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">          WIcon,</span><br><span class="line">          vnodes: &#123;</span><br><span class="line">            functional: true,</span><br><span class="line">            render: (h, context) =&gt; context.props.vnodes</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    ...</span><br><span class="line">    mounted:()&#123;</span><br><span class="line">          this.columns = this.$slots.default.map(node =&gt; &#123;</span><br><span class="line">        let &#123;text, field, width&#125; = node.componentOptions.propsData</span><br><span class="line">        let render = node.data.scopedSlots &amp;&amp; node.data.scopedSlots.default</span><br><span class="line">        return &#123;text, field, width, render&#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 外层引用</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line"> &lt;w-table :data-source=&quot;dataSource&quot; bordered :orderBy.sync=&quot;orderBy&quot; @update:orderBy=&quot;order&quot;</span><br><span class="line">               expend-field=&quot;description&quot; :height=&quot;200&quot; :selected-items.sync=&quot;selected&quot; :loading=&quot;loading&quot;&gt;</span><br><span class="line">        &lt;w-table-column text=&quot;姓名&quot; field=&quot;name&quot; :width=&quot;100&quot;&gt;</span><br><span class="line">          &lt;template slot-scope=&quot;props&quot;&gt; </span><br><span class="line">          &lt;--! 通过slot-scope,可以得到传递给table-column的属性的值 再进行操作即可--&gt;</span><br><span class="line">            &lt;a href=&quot;#&quot;&gt;&#123;&#123;props.value&#125;&#125;&lt;/a&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/w-table-column&gt;</span><br><span class="line">      &lt;/w-table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;template/&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;编写轮子的过程中遇到的问题与总结,&lt;br&gt;轮子项目地址:&lt;a href=&quot;https://github.com/o0Chivas0o/my-wheel&quot;&gt;https://github.com/o0Chivas0o/my-wheel&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记</title>
    <link href="http://yoursite.com/2019/03/15/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/03/15/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2019-03-15T02:06:43.000Z</published>
    <updated>2021-02-08T07:55:08.783Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>先预留出来此篇博客</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;先预留出来此篇博客&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    
    <category term="其他" scheme="http://yoursite.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>记录一些工作中会使用或将使用的工具</title>
    <link href="http://yoursite.com/2019/02/18/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9B%E5%B7%A5%E4%BD%9C%E4%B8%AD%E4%BC%9A%E4%BD%BF%E7%94%A8%E6%88%96%E5%B0%86%E4%BD%BF%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2019/02/18/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9B%E5%B7%A5%E4%BD%9C%E4%B8%AD%E4%BC%9A%E4%BD%BF%E7%94%A8%E6%88%96%E5%B0%86%E4%BD%BF%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7/</id>
    <published>2019-02-18T02:36:24.000Z</published>
    <updated>2021-02-08T07:55:08.703Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 记录一些工作中或者在浏览论坛中看到的一些好玩有用的工具。</p></blockquote><ol><li>vue-slideout:<a href="https://github.com/vouill/vue-slideout%EF%BC%8C%E4%BD%9C%E4%B8%BA">https://github.com/vouill/vue-slideout，作为</a></li><li>slideout:</li></ol><h3 id="—2019-08-18—"><a href="#—2019-08-18—" class="headerlink" title="—2019-08-18—"></a>—2019-08-18—</h3><blockquote><p>input placeholder 在ios垂直不居中 </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input::-webkit-input-placeholder &#123;</span><br><span class="line">  vertical-align: center;</span><br><span class="line">  line-height: normal;</span><br><span class="line">  color: #aab2bd; //字体颜色</span><br><span class="line">  font-size: 12px; // 字体大小</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt; 记录一些工作中或者在浏览论坛中看到的一些好玩有用的工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;vue-slideout:&lt;a href=&quot;https://github.com/vouill/vue-slideout%EF%BC%</summary>
      
    
    
    
    
    <category term="其他" scheme="http://yoursite.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>some notes</title>
    <link href="http://yoursite.com/2019/01/29/some%20notes/"/>
    <id>http://yoursite.com/2019/01/29/some%20notes/</id>
    <published>2019-01-29T08:06:24.000Z</published>
    <updated>2021-02-08T07:55:08.742Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于今天更新MWeb找不到<code>mainlib.db</code>这个文件,才发现我记录了一个多月的笔记被删了… 太靠不住了,还是打算用这个来记录一些做h5页面以及学习中的一些问题,但是每次记录过后我都会备份到github.io这个博客来</p></blockquote><h1 id="2019-1-29"><a href="#2019-1-29" class="headerlink" title="2019.1.29"></a>2019.1.29</h1><blockquote><p>高德地图在Vue中使用方法并在H5页面中应用需要注意几点</p></blockquote><ol><li>高德地图的AMap对象是挂在window下的,所以无法在vue组件中通过this.data去修改vue的私有属性,因为两者的内外this指向不同,可以通过<code>绑定变量指向当前this</code>去解决这个问题.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// file.vue</span><br><span class="line">&lt;template&gt;&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">const AMap = window.AMap  // 将AMap指向window.AMap</span><br><span class="line"></span><br><span class="line">export defalut&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        isHere:false,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        // 由于我的项目仅仅使用定位方法 所以用这个方法来获取用户当前位置</span><br><span class="line">        getLocation()&#123;</span><br><span class="line">            const THIS = this</span><br><span class="line">            let mapObj = new AMap.Map(&#x27;iCenter&#x27;)</span><br><span class="line">            mapObj.plugin(&#x27;AMap.Geolocation&#x27;,() =&gt; &#123;</span><br><span class="line">              let geolocation = new AMap.Geolocation(&#123;</span><br><span class="line">                enableHighAccuracy:true,//是否使用高精度定位，默认:true</span><br><span class="line">                timeout:10000,          //超过10秒后停止定位，默认：无穷大</span><br><span class="line">                maximumAge:0,           //定位结果缓存0毫秒，默认：0</span><br><span class="line">                convert:true           //自动偏移坐标，偏移后的坐标为高德坐标，默认：true</span><br><span class="line">              &#125;)</span><br><span class="line">              mapObj.addControl(geolocation)</span><br><span class="line">              geolocation.getCurrentPosition()</span><br><span class="line">              AMap.event.addListener(geolocation,&#x27;complete&#x27;,onComplete)//返回定位信息</span><br><span class="line">              AMap.event.addListener(geolocation,&#x27;error&#x27;,onError)      //返回定位出错信息</span><br><span class="line">              function onError ( data ) &#123;</span><br><span class="line">                // 定位出错</span><br><span class="line">                console.log(data)</span><br><span class="line">              &#125;</span><br><span class="line">    </span><br><span class="line">              function onComplete ( data ) &#123;</span><br><span class="line">                // 定位成功</span><br><span class="line">                THIS.isHere = true</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;style&gt;&lt;style&gt;</span><br></pre></td></tr></table></figure><h1 id="2019-2-20"><a href="#2019-2-20" class="headerlink" title="2019.2.20"></a>2019.2.20</h1><blockquote><p>今天造轮子时因为vue中事件不熟悉导致一个问题排查了2个小时,后来自己找到问题了,记录一下</p></blockquote><p>代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 组件</span><br><span class="line">  &lt;button class=&quot;w-button&quot; :class=&quot;&#123;[`icon-$&#123;iconPosition&#125;`]:true&#125;&quot; @click=&quot;$emit(&#x27;click&#x27;)&quot;&gt;</span><br><span class="line">        &lt;w-icon v-if=&quot;icon &amp;&amp; !loading&quot; :name=&quot;icon&quot; class=&quot;icon&quot;&gt;&lt;/w-icon&gt;</span><br><span class="line">        &lt;w-icon v-if=&quot;loading&quot; name=&quot;loading&quot; class=&quot;loading icon&quot;&gt;&lt;/w-icon&gt;</span><br><span class="line">        &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">            &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// app.js中测试代码</span><br><span class="line">&#123;</span><br><span class="line">  const Constructor = Vue.extend(Button)</span><br><span class="line">  const vm = new Constructor(&#123;</span><br><span class="line">    propsData:&#123;</span><br><span class="line">      icon:&#x27;settings&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  vm.$mount()</span><br><span class="line">  let spy = chai.spy(function () &#123;&#125;)</span><br><span class="line">  </span><br><span class="line">  // vm.$on(&#x27;click&#x27;) 中的click 对应组件中的$emit(&#x27;click&#x27;)</span><br><span class="line">  </span><br><span class="line">  vm.$on(&#x27;click&#x27;,spy)</span><br><span class="line">  </span><br><span class="line">  let button = vm.$el</span><br><span class="line">  button.click()</span><br><span class="line">  expect(spy).to.have.been.called()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导致如此简单的问题是因为使用了click,将addEventListener中的click事件记混淆了,并且不清楚这里的$on与addEventListener有何区别,最主要的原因是父子间通讯不熟导致的这个原因,特此记录.</p><h1 id="2019-03-01"><a href="#2019-03-01" class="headerlink" title="2019-03-01"></a>2019-03-01</h1><ol><li>Karma（[ˈkɑrmə] 卡玛）是一个测试运行器，它可以呼起浏览器，加载测试脚本，然后运行测试用例</li><li>Mocha（[ˈmoʊkə] 摩卡）是一个单元测试框架/库，它可以用来写测试用例</li><li>Sinon（西农）是一个 spy / stub / mock 库，用以辅助测试（使用后才能理解）</li></ol><h1 id="2019-04-23"><a href="#2019-04-23" class="headerlink" title="2019-04-23"></a>2019-04-23</h1><ol><li>在使用html2canvas时,字体设置大小会变为最小,在ios上,可以通过设置<code>font-variant: small-caps;</code>解决,具体参考:<a href="https://github.com/omwteam/html2canvas/issues/8">https://github.com/omwteam/html2canvas/issues/8</a></li></ol><h1 id="2019-05-24"><a href="#2019-05-24" class="headerlink" title="2019-05-24"></a>2019-05-24</h1><blockquote><p>js的浅克隆</p></blockquote><p>浅克隆仅仅只能克隆对象内属性最外层的属性。<br>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;Object&#125; obj</span><br><span class="line"> * @return &#123;Object&#125;</span><br><span class="line"> */</span><br><span class="line">function shallowClone(obj)&#123;</span><br><span class="line">    const newObj = &#123;&#125;</span><br><span class="line">    for(let i in obj)&#123;</span><br><span class="line">        newObj[i] = obj[i]</span><br><span class="line">    &#125;</span><br><span class="line">    return newObj</span><br><span class="line">&#125;</span><br><span class="line">let old = &#123;name:&#x27;jack&#x27;,age:&#x27;20&#x27;&#125;</span><br><span class="line"></span><br><span class="line">let new = shallowClone(old)</span><br><span class="line"></span><br><span class="line">old.age = &#x27;21&#x27;</span><br><span class="line">console.log(new.age,old.age) // new: 20 ,old: 21</span><br><span class="line"></span><br><span class="line">let old2 = &#123;</span><br><span class="line">    name:&#x27;jack&#x27;,</span><br><span class="line">    age:&#x27;20&#x27;,</span><br><span class="line">    family:&#123;</span><br><span class="line">        father:&#x27;jhon&#x27;,</span><br><span class="line">        mother:&#x27;rose&#x27;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">old2.family.father = &#x27;dwight&#x27;    </span><br><span class="line"></span><br><span class="line">let new2 = shallowClone(old2)</span><br><span class="line">console.log(new2.family.father,old2.family.father) // new2 : dwight , old2 : dwight</span><br></pre></td></tr></table></figure><p>综上所述,浅拷贝,仅能拷贝对象最外层,而对象内层的对象则进行地址的引用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;由于今天更新MWeb找不到&lt;code&gt;mainlib.db&lt;/code&gt;这个文件,才发现我记录了一个多月的笔记被删了… 太靠不住了,还是打算用这个来记录一些做h5页面以及学习中的一些问题,但是每次记录过后我都会备份到github.io这个博客来&lt;/</summary>
      
    
    
    
    
    <category term="其他" scheme="http://yoursite.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>zsh快捷键</title>
    <link href="http://yoursite.com/2018/12/27/zsh%20%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://yoursite.com/2018/12/27/zsh%20%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2018-12-27T02:33:01.000Z</published>
    <updated>2021-02-08T07:55:08.796Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ZSH快捷键"><a href="#ZSH快捷键" class="headerlink" title="ZSH快捷键"></a>ZSH快捷键</h3><blockquote><p>仅供参考</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">⌃ + u：清空当前行</span><br><span class="line">⌃ + a：移动到行首</span><br><span class="line">⌃ + e：移动到行尾</span><br><span class="line">⌃ + f：向前移动</span><br><span class="line">⌃ + b：向后移动</span><br><span class="line">⌃ + p：上一条命令</span><br><span class="line">⌃ + n：下一条命令</span><br><span class="line">⌃ + r：搜索历史命令</span><br><span class="line">⌃ + y：召回最近用命令删除的文字</span><br><span class="line">⌃ + h：删除光标之前的字符</span><br><span class="line">⌃ + d：删除光标所指的字符</span><br><span class="line">⌃ + w：删除光标之前的单词</span><br><span class="line">⌃ + k：删除从光标到行尾的内容</span><br><span class="line">⌃ + t：交换光标和之前的字符</span><br><span class="line">⌘ + Click：可以打开文件，文件夹和链接</span><br><span class="line">⌘ + n：新建窗口</span><br><span class="line">⌘ + t：新建标签页</span><br><span class="line">⌘ + w：关闭当前页</span><br><span class="line">⌘ + 数字 || ⌘ + 方向键：切换标签页</span><br><span class="line">⌥⌘ + 数字：切换窗口</span><br><span class="line">⌘ + enter：切换全屏</span><br><span class="line">⌘ + d：左右分屏</span><br><span class="line">⇧⌘ + d：上下分屏</span><br><span class="line">⌘ + ;：自动补全历史记录</span><br><span class="line">⇧⌘ + h：自动补全剪贴板历史</span><br><span class="line">⌥⌘ + e：查找所有来定位某个标签页</span><br><span class="line">⌘ + r || ⌃ + l：清屏</span><br><span class="line">⌘ + /：显示光标位置</span><br><span class="line">⌥⌘ + b：历史回放</span><br><span class="line">⌘ + f：查找，然后用tab和⇧ + tab可以向右和向左补全，补全之后的内容会被自动复制， 还可以用⌥ + enter将查找结果输入终端</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;ZSH快捷键&quot;&gt;&lt;a href=&quot;#ZSH快捷键&quot; class=&quot;headerlink&quot; title=&quot;ZSH快捷键&quot;&gt;&lt;/a&gt;ZSH快捷键&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;仅供参考&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;hig</summary>
      
    
    
    
    
    <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Markdown基础语法</title>
    <link href="http://yoursite.com/2018/12/26/Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2018/12/26/Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2018-12-26T03:33:01.000Z</published>
    <updated>2021-02-08T07:55:08.683Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">标题：</span><br><span class="line">#h1级标题</span><br><span class="line">##h2级标题</span><br><span class="line">###h3级标题</span><br><span class="line">####h4级标题</span><br><span class="line">#####h5级标题</span><br><span class="line">######h6级标题</span><br><span class="line"></span><br><span class="line">分割线：三个以上的短线 即可作出分割线</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"></span><br><span class="line">超链接：[连接名称](网址 , 标题)</span><br><span class="line">[我是链接名](http://www.izhangbo.cn, &quot;我是标题&quot;)</span><br><span class="line">[&lt;i class=&quot;icon-refresh&quot;&gt;&lt;/i&gt; 点我刷新](/sonfilename/)</span><br><span class="line"></span><br><span class="line">另一种超链接写法：[链接名][链接代号]</span><br><span class="line">[here][3]</span><br><span class="line">然后在别的地方定义 3 这个详细链接信息，</span><br><span class="line">[3]: http://www.izhangbo.cn &quot;聚牛团队&quot;</span><br><span class="line"></span><br><span class="line">直接展示链接的写法：&lt;http://www.izhangbo.cn&gt;</span><br><span class="line"></span><br><span class="line">键盘键</span><br><span class="line">&lt;kbd&gt;Ctrl+[&lt;/kbd&gt; and &lt;kbd&gt;Ctrl+]&lt;/kbd&gt;</span><br><span class="line"></span><br><span class="line">code格式：反引号</span><br><span class="line">Use the `printf()` function.</span><br><span class="line"></span><br><span class="line">``There is a literal backtick (`) here.针对在代码区段内插入反引号的情况`` </span><br><span class="line"></span><br><span class="line">强调：</span><br><span class="line">*斜体强调*</span><br><span class="line">**粗体强调**</span><br><span class="line"></span><br><span class="line">图片</span><br><span class="line">![Alt text](http://www.izhangbo.cn/wp-content/themes/minty/img/logo.png &quot;Optional title&quot;)</span><br><span class="line"></span><br><span class="line">使用 icon 图标文字</span><br><span class="line">&lt;i class=&quot;icon-cog&quot;&gt;&lt;/i&gt;</span><br><span class="line"></span><br><span class="line">段落：以一个空行开始，以一个空行结束，中间的就是一个段落。</span><br><span class="line"></span><br><span class="line">表格：</span><br><span class="line"></span><br><span class="line">Item     | Value</span><br><span class="line">-------- | ---</span><br><span class="line">Computer | $1600</span><br><span class="line">Phone    | $12</span><br><span class="line">Pipe     | $1</span><br><span class="line"></span><br><span class="line">无序列表：使用 - 加一个空格（）</span><br><span class="line"></span><br><span class="line">- 无需列表1</span><br><span class="line">- 无序列表2</span><br><span class="line">- 无序列表3</span><br><span class="line"></span><br><span class="line">有序列表：使用 数字 加一个英文句点</span><br><span class="line"></span><br><span class="line">1. 有序列表</span><br><span class="line">2. 有序列表</span><br><span class="line">3. 有序列表</span><br><span class="line">4. 有序列表</span><br><span class="line">5. 有序列表</span><br><span class="line"></span><br><span class="line">换行缩进形成代码区块</span><br><span class="line"></span><br><span class="line">    这里先换行，然后缩进4个空格，之后的内容便可以原样显示了，适合用于显示代码内容。直到文本结束或最后一个存在缩进的行为止。    </span><br><span class="line"></span><br><span class="line">块引用</span><br><span class="line">&gt;给引用的文本开始位置都加一个 &#x27;&gt;&#x27;，</span><br><span class="line">&gt;便可组成一个块引用。在块引用中，可以结合</span><br><span class="line">&gt;其他markdown元素一块使用，比如列表。</span><br><span class="line">&gt;**强调**</span><br><span class="line">也可以只在第一行加大于号，其他位置不加。</span><br><span class="line"></span><br><span class="line">&gt;- 块引用里使用列表，需要和上面的内容隔开一个空行</span><br><span class="line">&gt;- 记得加空格哦。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    
    <category term="其他" scheme="http://yoursite.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>git使用</title>
    <link href="http://yoursite.com/2018/12/21/git/"/>
    <id>http://yoursite.com/2018/12/21/git/</id>
    <published>2018-12-21T09:33:01.000Z</published>
    <updated>2021-03-09T08:32:08.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本控制器-Version-Control-Systems"><a href="#版本控制器-Version-Control-Systems" class="headerlink" title="版本控制器 (Version Control Systems)"></a>版本控制器 (Version Control Systems)</h2><ul><li>在未有工作工具流之前,使用的文件夹目录拷贝,效率低下,沟通成本高.</li><li>集中式版本控制系统<ul><li>SVN、VSS</li></ul></li><li>分布式版本控制系统<ul><li>Git</li></ul></li></ul><p>由于因在工作中只用过git版本控制器,也就是分布式版本控制器.所以只总结git的使用.并且最近在<code>极客时间</code>上学习<code>苏玲</code>老师的<code>「玩转git三剑客」</code>的视频课程,一起学习,一起总结.</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>Git优势如下 :</p><ol><li>最优的存储能力</li><li>非凡的性能</li><li>开源的</li><li>很容易做备份</li><li>支持离线操作</li><li>很容易定制工作流程</li></ol><h3 id="Git下载"><a href="#Git下载" class="headerlink" title="Git下载"></a>Git下载</h3><blockquote><p>下载链接 : <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p></blockquote><h3 id="Git最小配置"><a href="#Git最小配置" class="headerlink" title="Git最小配置"></a>Git最小配置</h3><blockquote><p>给git配置用户名和用户邮箱</p></blockquote><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git config [--local | --global | --system] user.name &#x27;Your name&#x27; // 名称设置</span><br><span class="line">git config [--local | --global | --system] user.email &#x27;Your email&#x27; // 邮箱设置</span><br><span class="line"></span><br><span class="line">--local 区域内本仓库</span><br><span class="line">--global 全局仓库有效</span><br><span class="line">--system 系统登录用户有效</span><br><span class="line"></span><br><span class="line">// 设置之后 可以通过下面命令来查看设置是否成功</span><br><span class="line">git config --list --global</span><br><span class="line">// 设置的是全局 需加上--global 对全局查看</span><br><span class="line">// 若为local 必须有一个本地项目仓库</span><br><span class="line"></span><br><span class="line">// 清除命令</span><br><span class="line">git config unset [--local | --global | --system] user.name &#x27;Your name&#x27; // 名称设置</span><br><span class="line">git config unset [--local | --global | --system] user.email &#x27;Your email&#x27; // 邮箱设置</span><br></pre></td></tr></table></figure>&lt;/br&gt;</code></pre><p>——2018.12.24日更新——</p><h3 id="为每个项目添加-gitignore文件"><a href="#为每个项目添加-gitignore文件" class="headerlink" title="为每个项目添加.gitignore文件"></a>为每个项目添加.gitignore文件</h3><blockquote><p>通常提交项目会习惯性使用 <code>git add .</code> 的命令,这样的操作会将目录中所有文件都添加到文件暂缓区(git status 所展示的文件和文件所在地址),而实际项目提交当中会引用到大量的第三方库、方法，会导致将<code>node_modules</code>整个文件夹提交到暂缓区,推送到远程仓库会造成效率降低。所以会在每个项目文件夹中添加 <code>.gitignore</code> 文件来默认不上传这些文件。</p></blockquote><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">node_modules</span><br><span class="line">/dist</span><br><span class="line"></span><br><span class="line"># local env files</span><br><span class="line">.env.local</span><br><span class="line">.env.*.local</span><br><span class="line"></span><br><span class="line"># Log files</span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br><span class="line"></span><br><span class="line"># Editor directories and files</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">*.suo</span><br><span class="line">*.ntvs*</span><br><span class="line">*.njsproj</span><br><span class="line">*.sln</span><br><span class="line">*.sw*</span><br></pre></td></tr></table></figure><p>上述文件是通过<code>vue-cli</code>自动构建项目目录下的<code>.gitignore</code>文件,默认git不提交<code>各类编译器的配置文件</code>和<code>第三方npm包、方法、插件</code>文件。</p><h2 id="Git-commit-规范"><a href="#Git-commit-规范" class="headerlink" title="Git commit 规范"></a>Git commit 规范</h2><blockquote><p>引用<code>@知乎者也</code>的微信公众号文章:「我的commit规范」→ <a href="https://mp.weixin.qq.com/s?__biz=MzIyMzEyMDQ5MQ==&mid=2656091498&idx=1&sn=8e15c57c3c1cb6c7579208aaad5ae256&chksm=f387006ec4f08978606e1168d417869a02c42945eed246a310c6bc06e7538888484d857eaffc&scene=4&subscene=126&ascene=0&devicetype=android-26&version=26070337&nettype=WIFI&abtest_cookie=BQABAAoACwANABMAFAAFACOXHgBZmR4AhJkeAImZHgCNmR4AAAA=&lang=zh_CN&pass_ticket=AAI4HCiVr/cBu7J0BPB0hr/v6WUoYnaJG1b7tytCnHA4Oeh9WeRwR8brLOUDmOO2&wx_header=1">传送门</a><br>还有<code>@囧克斯</code>的译文作为参考:「如何撰写Git提交信息」→<a href="https://jiongks.name/blog/git-commit/">传送门</a></p></blockquote><p>git commit 信息应具有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Header&gt;</span><br><span class="line"></span><br><span class="line">&lt;Body&gt;</span><br><span class="line"></span><br><span class="line">&lt;Footer&gt;</span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">说了半天不给个例子都是瞎扯淡，下面是一个完整的例子：</span><br><span class="line"></span><br><span class="line">&lt;Header&gt;</span><br><span class="line">feat: 添加了分享功能</span><br><span class="line"></span><br><span class="line">&lt;Body&gt;</span><br><span class="line">给每篇博文添加了分享功能</span><br><span class="line"></span><br><span class="line">- 添加分享到微博功能</span><br><span class="line"></span><br><span class="line">- 添加分享到微信功能</span><br><span class="line"></span><br><span class="line">- 添加分享到朋友圈功能</span><br><span class="line"></span><br><span class="line">&lt;Footer&gt;</span><br><span class="line">Issue #1, #2</span><br><span class="line"></span><br><span class="line">Close #1</span><br></pre></td></tr></table></figure><h2 id="Git操作"><a href="#Git操作" class="headerlink" title="Git操作"></a>Git操作</h2><blockquote><p>观看<code>「玩转git三剑客」</code>并新建<code>git-test</code>项目来进行<code>Git的深度学习</code></p></blockquote><h3 id="建Git仓库"><a href="#建Git仓库" class="headerlink" title="建Git仓库"></a>建Git仓库</h3><p>两种场景:</p><ol><li>已有代码构建Git仓库:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd 项目所在目录</span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure><ol start="2"><li>新建项目直接用Git管理:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd 某个文件夹</span><br><span class="line">$ git init project__name</span><br><span class="line">$ cd project__name</span><br></pre></td></tr></table></figure><h3 id="Git基础命令"><a href="#Git基础命令" class="headerlink" title="Git基础命令"></a>Git基础命令</h3><h4 id="将编辑或修改过的文件提交到Git文件暂存区"><a href="#将编辑或修改过的文件提交到Git文件暂存区" class="headerlink" title="将编辑或修改过的文件提交到Git文件暂存区:"></a>将编辑或修改过的文件提交到<code>Git文件暂存区</code>:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">***.gitignore文件内添加的内容将不会提交到Git文件    暂存区***</span><br><span class="line">     </span><br><span class="line">*** 提交项目文件夹下单个文件 ***</span><br><span class="line">$ git add test.html</span><br><span class="line">    </span><br><span class="line">*** 提交项目文件夹下某个文件夹 ***</span><br><span class="line">$ git add text/</span><br><span class="line">    </span><br><span class="line">*** 提交已经提交过的文件或文件夹 ***</span><br><span class="line">$ git add -u</span><br><span class="line">    </span><br><span class="line">*** 提交项目文件夹内所有文件 ***</span><br><span class="line">$ git add . || $ gaa</span><br></pre></td></tr></table></figure><h4 id="查看Git文件暂存区-git-status-："><a href="#查看Git文件暂存区-git-status-：" class="headerlink" title="查看Git文件暂存区(git status)："></a>查看<code>Git文件暂存区</code>(git status)：</h4><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status || $ gst</span><br></pre></td></tr></table></figure></code></pre><h4 id="为添加到Git文件暂存区的文件添加描述-git-commit"><a href="#为添加到Git文件暂存区的文件添加描述-git-commit" class="headerlink" title="为添加到Git文件暂存区的文件添加描述(git commit):"></a>为添加到<code>Git文件暂存区</code>的文件添加描述(git commit):</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*** 简单描述 ***</span><br><span class="line">$ git commit -m &#x27;描述&#x27;</span><br><span class="line">    </span><br><span class="line">*** 有规范的描述 ***</span><br><span class="line">$ git commit || $ gc</span><br><span class="line">进入vim编辑描述即可,描述内容参考上述的commit规范</span><br></pre></td></tr></table></figure><h4 id="已添加到Git文件暂存区文件进行重命名-git-mv"><a href="#已添加到Git文件暂存区文件进行重命名-git-mv" class="headerlink" title="已添加到Git文件暂存区文件进行重命名(git mv):"></a>已添加到<code>Git文件暂存区</code>文件进行重命名(git mv):</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">*** 例如文件名A重命名为B ***</span><br><span class="line">    </span><br><span class="line">方法一 :</span><br><span class="line">1.直接修改项目文件夹内文件名并提交文件</span><br><span class="line">2.删除Git文件暂存区内原来的文件</span><br><span class="line"></span><br><span class="line">$ git add B</span><br><span class="line">$ git rm A</span><br><span class="line">*** 若想恢复之前的操作清理掉暂缓区内的东西即可 ***</span><br><span class="line">$ git reset --hard</span><br><span class="line">    </span><br><span class="line">方法二 :</span><br><span class="line">$ git mv A B</span><br><span class="line">    </span><br><span class="line">推荐方法为方法二</span><br></pre></td></tr></table></figure><h4 id="查看Git提交历史-git-log"><a href="#查看Git提交历史-git-log" class="headerlink" title="查看Git提交历史(git log):"></a>查看Git提交历史(git log):</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">*** 查看完整历史 ***</span><br><span class="line">--- 默认展示当前分支 ---</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line">*** 若查看所有分支 ***</span><br><span class="line">--all</span><br><span class="line"></span><br><span class="line">*** 查看简述 ***</span><br><span class="line">--oneline</span><br><span class="line"></span><br><span class="line">*** 查找最近几次的历史 ***</span><br><span class="line">-n[math | 1,2,3,4]</span><br><span class="line">    </span><br><span class="line">*** 图形化 ***</span><br><span class="line">--graph</span><br></pre></td></tr></table></figure><h4 id="Git图形界面命令"><a href="#Git图形界面命令" class="headerlink" title="Git图形界面命令"></a>Git图形界面命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitk</span><br></pre></td></tr></table></figure><h4 id="git目录-cat-file-命令查看文件"><a href="#git目录-cat-file-命令查看文件" class="headerlink" title=".git目录(cat-file 命令查看文件)"></a>.git目录(cat-file 命令查看文件)</h4><blockquote><p>cat命令主要用来查看文件内容，创建文件，文件合并，追加文件内容等功能。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">*** .git文件夹里所包含的东西 ***</span><br><span class="line"></span><br><span class="line">•COMMIT_EDITMSG</span><br><span class="line">•config (当前 git 的配置文件)</span><br><span class="line">•description (仓库的描述信息文件)</span><br><span class="line">•HEAD (指向当前所在的分支)</span><br><span class="line">        例如 : 当前在 develop 分支,</span><br><span class="line">        实际指向地址是 refs/heads/develop</span><br><span class="line">    </span><br><span class="line">•hooks [文件夹]</span><br><span class="line">•index</span><br><span class="line">•info [文件夹]</span><br><span class="line">•logs [文件夹]</span><br><span class="line">•objects [文件夹] (存放所有的 git 对象)</span><br><span class="line">        对象哈希值前 2 位作为文件夹名称</span><br><span class="line">        后 38 位作为对象文件名,</span><br><span class="line">        可通过 git cat-file -p 命令,</span><br><span class="line">        拼接文件夹名称+文件名查看</span><br><span class="line">    </span><br><span class="line">•ORIG_HEAD</span><br><span class="line">•refs [文件夹] </span><br><span class="line">        有两个分支的情况下:</span><br><span class="line">        master  (master的文件)</span><br><span class="line">        test    (test的文件)</span><br><span class="line">    </span><br><span class="line">•heads (存放当前项目的所有分支)</span><br><span class="line">•tags (存放的当前项目的所有标签，又叫做里程碑)</span><br><span class="line">•cat 命令， 功能：用来显示文件。 例如 cat text.md 显示 text.md 文件的内容</span><br><span class="line">•ls -al 命令， 表示列出当前目录下的所有文件（包括隐藏文件）</span><br><span class="line"></span><br><span class="line">*** git cat-file 命令 ***</span><br><span class="line"></span><br><span class="line">•git cat-file -t 命令， 查看 git 对象的类型</span><br><span class="line">•git cat-file -p 命令， 查看 git 对象的内容</span><br><span class="line">•git cat-file -s 命令， 查看 git 对象的大小   </span><br></pre></td></tr></table></figure><h2 id="commit、tree和blob对应关系"><a href="#commit、tree和blob对应关系" class="headerlink" title="commit、tree和blob对应关系"></a>commit、tree和blob对应关系</h2><blockquote><p>Git有3大对象,commit、tree和blob,它们之间对应关系类似于树.</p></blockquote><p>例如: 本次提交信息中新增了<code>index.html</code>文件和<code>style.css</code>文件以及<code>logo.png</code>图片文件,此时执行<code>git add .</code>命令之后,执行<code>git commit</code>填写完描述信息过后,会生成对应的commit文件.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">*** 此时结构应该如下 ***</span><br><span class="line">commit  [hash]</span><br><span class="line">Author: [yourName]</span><br><span class="line">Date:   [commitTime]</span><br><span class="line"></span><br><span class="line">    describe</span><br><span class="line">    </span><br><span class="line">*** 输入 git cat-file -p [hash] 会出现如下信息***</span><br><span class="line">tree [hash-tree]</span><br><span class="line">parent [hash]</span><br><span class="line"></span><br><span class="line">*** 接着输入 git cat-file -p [hash-tree] 便能查看到blob和tree***</span><br><span class="line">tree [hash-tree-tree]</span><br><span class="line">blob [hash-tree-blob]</span><br><span class="line"></span><br><span class="line">*** 输入 git cat-file -p [hash-tree-blob] 即可查看到相信的文件内容***</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;版本控制器-Version-Control-Systems&quot;&gt;&lt;a href=&quot;#版本控制器-Version-Control-Systems&quot; class=&quot;headerlink&quot; title=&quot;版本控制器 (Version Control Systems)&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Router、webpack个人配置</title>
    <link href="http://yoursite.com/2018/12/21/vue-router/"/>
    <id>http://yoursite.com/2018/12/21/vue-router/</id>
    <published>2018-12-21T04:24:07.000Z</published>
    <updated>2021-02-08T07:55:08.732Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一些个人在vue构建项目中的router配置和webpack改动,仅在<code>vue-cli 3.0</code>版本下有效</p></blockquote></br>## vue-router在项目初始化过程中,会涉及到配置路由，而在使用vue-router的过程中，需要注意vue的两种路由模式，一个是默认的hash路由，另一个是history路由。<p></br> 1. hash路由在路径后会带有一个#/<br>例如:localhost:8080/#/</p><p></br> 2. 而history路由则会将路径后的#/去掉,<br>例如:localhost:8080/</p><hr><p></br>具体配置信息如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">在router.js文件中,添加</span><br><span class="line">mode:&#x27;history&#x27;,</span><br><span class="line">base:&#x27;xxx&#x27;</span><br><span class="line">这两行代码</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  mode: &#x27;history&#x27;,</span><br><span class="line">  base: &#x27;/xxx/&#x27;,</span><br><span class="line">  routes: [</span><br><span class="line">  ...</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p></br>上述<code>base:&#39;xxx&#39;</code>中的<code>xxx</code>是在<code>vue-cli</code>创建的文件中的<code>config</code>文件夹下的<code>index.js</code>文件中,<code>build</code>这一行里进行配置的,找到该文件进行如下配置:<br></br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">build&#123;</span><br><span class="line">    // Template for index.html</span><br><span class="line">    index: path.resolve(__dirname, &#x27;../xxx/index.html&#x27;),</span><br><span class="line"></span><br><span class="line">    // Paths</span><br><span class="line">    assetsRoot: path.resolve(__dirname, &#x27;../xxx&#x27;),</span><br><span class="line">    assetsSubDirectory: &#x27;static&#x27;,</span><br><span class="line">    assetsPublicPath: &#x27;/xxx/&#x27;,</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></br></br>---</br></br>  ## 12.4日补充<p>在使用vue-router模式进行页面切换时,会发现有时候,页面出现的位置并不是顶部,而是在其他位置,可以通过<code>scrollBehavior</code>这一函数去修改跳转路由后的页面初始位置。</p><p></br><strong>此方法仅在’histroy’模式下有用</strong></br></p><p></br>在<code>router</code>文件夹内的<code>index.js</code>文件添加如下配置:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">export default new Router(&#123;</span><br><span class="line">  mode: &#x27;history&#x27;,</span><br><span class="line">  base: &#x27;/xxx/&#x27;,</span><br><span class="line">  routes: [</span><br><span class="line">  ...</span><br><span class="line">  ],</span><br><span class="line">  scrollBehavior (to, from, savedPosition) &#123;</span><br><span class="line">    // return 期望滚动到哪个的位置</span><br><span class="line">    </span><br><span class="line">    // 1. return &#123; x:0, y:0&#125; 跳转路由后回到页面顶部</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></br></br>---</br>  ## 12.21补充微信H5分享存在的问题:1. SPA应用History模式,由于每次路由并不会刷新,会导致获取微信签名失败,所以在SPA应用History模式下,想要做到多页面均可分享,需启用Hash路由模式.   参考(@yongheng2016的github分享):[微信分享过程中遇到的问题总结（SPA/history模式）](https://github.com/yongheng2016/blog/issues/78)   如:   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line">mode:&#x27;hash&#x27;,</span><br><span class="line">base:&#x27;xxx&#x27;,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   <ol start="2"><li>目前项目是用Hash路由解决了多页面分享的问题,下次碰到问题再解决</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一些个人在vue构建项目中的router配置和webpack改动,仅在&lt;code&gt;vue-cli 3.0&lt;/code&gt;版本下有效&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/br&gt;
## vue-router
在项目初始化过程中,会涉及到配置路由，而在</summary>
      
    
    
    
    
    <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Itrem2 oh-my-zsh git 快捷键</title>
    <link href="http://yoursite.com/2018/12/19/Itrem2%20oh-my-zsh%20git%20%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://yoursite.com/2018/12/19/Itrem2%20oh-my-zsh%20git%20%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2018-12-19T07:24:07.000Z</published>
    <updated>2021-02-08T07:55:08.693Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在<code>oh-my-zsh</code>中<code>plugins</code>的<code>git</code>的快捷键,仅供记录查询</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"># Aliases</span><br><span class="line"># (sorted alphabetically)</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">alias g=&#x27;git&#x27;</span><br><span class="line"></span><br><span class="line">alias ga=&#x27;git add&#x27;</span><br><span class="line">alias gaa=&#x27;git add --all&#x27;</span><br><span class="line">alias gapa=&#x27;git add --patch&#x27;</span><br><span class="line">alias gau=&#x27;git add --update&#x27;</span><br><span class="line">alias gav=&#x27;git add --verbose&#x27;</span><br><span class="line">alias gap=&#x27;git apply&#x27;</span><br><span class="line"></span><br><span class="line">alias gb=&#x27;git branch&#x27;</span><br><span class="line">alias gba=&#x27;git branch -a&#x27;</span><br><span class="line">alias gbd=&#x27;git branch -d&#x27;</span><br><span class="line">alias gbda=&#x27;git branch --no-color --merged | command grep -vE &quot;^(\*|\s*(master|develop|dev)\s*$)&quot; | command xargs -n 1 git branch -d&#x27;</span><br><span class="line">alias gbD=&#x27;git branch -D&#x27;</span><br><span class="line">alias gbl=&#x27;git blame -b -w&#x27;</span><br><span class="line">alias gbnm=&#x27;git branch --no-merged&#x27;</span><br><span class="line">alias gbr=&#x27;git branch --remote&#x27;</span><br><span class="line">alias gbs=&#x27;git bisect&#x27;</span><br><span class="line">alias gbsb=&#x27;git bisect bad&#x27;</span><br><span class="line">alias gbsg=&#x27;git bisect good&#x27;</span><br><span class="line">alias gbsr=&#x27;git bisect reset&#x27;</span><br><span class="line">alias gbss=&#x27;git bisect start&#x27;</span><br><span class="line"></span><br><span class="line">alias gc=&#x27;git commit -v&#x27;</span><br><span class="line">alias gc!=&#x27;git commit -v --amend&#x27;</span><br><span class="line">alias gcn!=&#x27;git commit -v --no-edit --amend&#x27;</span><br><span class="line">alias gca=&#x27;git commit -v -a&#x27;</span><br><span class="line">alias gca!=&#x27;git commit -v -a --amend&#x27;</span><br><span class="line">alias gcan!=&#x27;git commit -v -a --no-edit --amend&#x27;</span><br><span class="line">alias gcans!=&#x27;git commit -v -a -s --no-edit --amend&#x27;</span><br><span class="line">alias gcam=&#x27;git commit -a -m&#x27;</span><br><span class="line">alias gcsm=&#x27;git commit -s -m&#x27;</span><br><span class="line">alias gcb=&#x27;git checkout -b&#x27;</span><br><span class="line">alias gcf=&#x27;git config --list&#x27;</span><br><span class="line">alias gcl=&#x27;git clone --recurse-submodules&#x27;</span><br><span class="line">alias gclean=&#x27;git clean -fd&#x27;</span><br><span class="line">alias gpristine=&#x27;git reset --hard &amp;&amp; git clean -dfx&#x27;</span><br><span class="line">alias gcm=&#x27;git checkout master&#x27;</span><br><span class="line">alias gcd=&#x27;git checkout develop&#x27;</span><br><span class="line">alias gcmsg=&#x27;git commit -m&#x27;</span><br><span class="line">alias gco=&#x27;git checkout&#x27;</span><br><span class="line">alias gcount=&#x27;git shortlog -sn&#x27;</span><br><span class="line">compdef _git gcount</span><br><span class="line">alias gcp=&#x27;git cherry-pick&#x27;</span><br><span class="line">alias gcpa=&#x27;git cherry-pick --abort&#x27;</span><br><span class="line">alias gcpc=&#x27;git cherry-pick --continue&#x27;</span><br><span class="line">alias gcs=&#x27;git commit -S&#x27;</span><br><span class="line"></span><br><span class="line">alias gd=&#x27;git diff&#x27;</span><br><span class="line">alias gdca=&#x27;git diff --cached&#x27;</span><br><span class="line">alias gdcw=&#x27;git diff --cached --word-diff&#x27;</span><br><span class="line">alias gdct=&#x27;git describe --tags `git rev-list --tags --max-count=1`&#x27;</span><br><span class="line">alias gds=&#x27;git diff --staged&#x27;</span><br><span class="line">alias gdt=&#x27;git diff-tree --no-commit-id --name-only -r&#x27;</span><br><span class="line">alias gdw=&#x27;git diff --word-diff&#x27;</span><br><span class="line"></span><br><span class="line">gdv() &#123; git diff -w &quot;$@&quot; | view - &#125;</span><br><span class="line">compdef _git gdv=git-diff</span><br><span class="line"></span><br><span class="line">alias gf=&#x27;git fetch&#x27;</span><br><span class="line">alias gfa=&#x27;git fetch --all --prune&#x27;</span><br><span class="line">alias gfo=&#x27;git fetch origin&#x27;</span><br><span class="line"></span><br><span class="line">function gfg() &#123; git ls-files | grep $@ &#125;</span><br><span class="line">compdef _grep gfg</span><br><span class="line"></span><br><span class="line">alias gg=&#x27;git gui citool&#x27;</span><br><span class="line">alias gga=&#x27;git gui citool --amend&#x27;</span><br><span class="line"></span><br><span class="line">ggf() &#123;</span><br><span class="line">  [[ &quot;$#&quot; != 1 ]] &amp;&amp; local b=&quot;$(git_current_branch)&quot;</span><br><span class="line">  git push --force origin &quot;$&#123;b:=$1&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">ggfl() &#123;</span><br><span class="line">[[ &quot;$#&quot; != 1 ]] &amp;&amp; local b=&quot;$(git_current_branch)&quot;</span><br><span class="line">git push --force-with-lease origin &quot;$&#123;b:=$1&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">compdef _git ggf=git-checkout</span><br><span class="line"></span><br><span class="line">ggl() &#123;</span><br><span class="line">  if [[ &quot;$#&quot; != 0 ]] &amp;&amp; [[ &quot;$#&quot; != 1 ]]; then</span><br><span class="line">    git pull origin &quot;$&#123;*&#125;&quot;</span><br><span class="line">  else</span><br><span class="line">    [[ &quot;$#&quot; == 0 ]] &amp;&amp; local b=&quot;$(git_current_branch)&quot;</span><br><span class="line">    git pull origin &quot;$&#123;b:=$1&#125;&quot;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line">compdef _git ggl=git-checkout</span><br><span class="line"></span><br><span class="line">ggp() &#123;</span><br><span class="line">  if [[ &quot;$#&quot; != 0 ]] &amp;&amp; [[ &quot;$#&quot; != 1 ]]; then</span><br><span class="line">    git push origin &quot;$&#123;*&#125;&quot;</span><br><span class="line">  else</span><br><span class="line">    [[ &quot;$#&quot; == 0 ]] &amp;&amp; local b=&quot;$(git_current_branch)&quot;</span><br><span class="line">    git push origin &quot;$&#123;b:=$1&#125;&quot;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line">compdef _git ggp=git-checkout</span><br><span class="line"></span><br><span class="line">ggpnp() &#123;</span><br><span class="line">  if [[ &quot;$#&quot; == 0 ]]; then</span><br><span class="line">    ggl &amp;&amp; ggp</span><br><span class="line">  else</span><br><span class="line">    ggl &quot;$&#123;*&#125;&quot; &amp;&amp; ggp &quot;$&#123;*&#125;&quot;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line">compdef _git ggpnp=git-checkout</span><br><span class="line"></span><br><span class="line">ggu() &#123;</span><br><span class="line">  [[ &quot;$#&quot; != 1 ]] &amp;&amp; local b=&quot;$(git_current_branch)&quot;</span><br><span class="line">  git pull --rebase origin &quot;$&#123;b:=$1&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">compdef _git ggu=git-checkout</span><br><span class="line"></span><br><span class="line">alias ggpur=&#x27;ggu&#x27;</span><br><span class="line">compdef _git ggpur=git-checkout</span><br><span class="line"></span><br><span class="line">alias ggpull=&#x27;git pull origin $(git_current_branch)&#x27;</span><br><span class="line">compdef _git ggpull=git-checkout</span><br><span class="line"></span><br><span class="line">alias ggpush=&#x27;git push origin $(git_current_branch)&#x27;</span><br><span class="line">compdef _git ggpush=git-checkout</span><br><span class="line"></span><br><span class="line">alias ggsup=&#x27;git branch --set-upstream-to=origin/$(git_current_branch)&#x27;</span><br><span class="line">alias gpsup=&#x27;git push --set-upstream origin $(git_current_branch)&#x27;</span><br><span class="line"></span><br><span class="line">alias ghh=&#x27;git help&#x27;</span><br><span class="line"></span><br><span class="line">alias gignore=&#x27;git update-index --assume-unchanged&#x27;</span><br><span class="line">alias gignored=&#x27;git ls-files -v | grep &quot;^[[:lower:]]&quot;&#x27;</span><br><span class="line">alias git-svn-dcommit-push=&#x27;git svn dcommit &amp;&amp; git push github master:svntrunk&#x27;</span><br><span class="line">compdef _git git-svn-dcommit-push=git</span><br><span class="line"></span><br><span class="line">alias gk=&#x27;\gitk --all --branches&#x27;</span><br><span class="line">compdef _git gk=&#x27;gitk&#x27;</span><br><span class="line">alias gke=&#x27;\gitk --all $(git log -g --pretty=%h)&#x27;</span><br><span class="line">compdef _git gke=&#x27;gitk&#x27;</span><br><span class="line"></span><br><span class="line">alias gl=&#x27;git pull&#x27;</span><br><span class="line">alias glg=&#x27;git log --stat&#x27;</span><br><span class="line">alias glgp=&#x27;git log --stat -p&#x27;</span><br><span class="line">alias glgg=&#x27;git log --graph&#x27;</span><br><span class="line">alias glgga=&#x27;git log --graph --decorate --all&#x27;</span><br><span class="line">alias glgm=&#x27;git log --graph --max-count=10&#x27;</span><br><span class="line">alias glo=&#x27;git log --oneline --decorate&#x27;</span><br><span class="line">alias glol=&quot;git log --graph --pretty=&#x27;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27;&quot;</span><br><span class="line">alias glols=&quot;git log --graph --pretty=&#x27;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --stat&quot;</span><br><span class="line">alias glod=&quot;git log --graph --pretty=&#x27;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)&lt;%an&gt;%Creset&#x27;&quot;</span><br><span class="line">alias glods=&quot;git log --graph --pretty=&#x27;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)&lt;%an&gt;%Creset&#x27; --date=short&quot;</span><br><span class="line">alias glola=&quot;git log --graph --pretty=&#x27;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --all&quot;</span><br><span class="line">alias glog=&#x27;git log --oneline --decorate --graph&#x27;</span><br><span class="line">alias gloga=&#x27;git log --oneline --decorate --graph --all&#x27;</span><br><span class="line">alias glp=&quot;_git_log_prettily&quot;</span><br><span class="line">compdef _git glp=git-log</span><br><span class="line"></span><br><span class="line">alias gm=&#x27;git merge&#x27;</span><br><span class="line">alias gmom=&#x27;git merge origin/master&#x27;</span><br><span class="line">alias gmt=&#x27;git mergetool --no-prompt&#x27;</span><br><span class="line">alias gmtvim=&#x27;git mergetool --no-prompt --tool=vimdiff&#x27;</span><br><span class="line">alias gmum=&#x27;git merge upstream/master&#x27;</span><br><span class="line">alias gma=&#x27;git merge --abort&#x27;</span><br><span class="line"></span><br><span class="line">alias gp=&#x27;git push&#x27;</span><br><span class="line">alias gpd=&#x27;git push --dry-run&#x27;</span><br><span class="line">alias gpf=&#x27;git push --force-with-lease&#x27;</span><br><span class="line">alias gpf!=&#x27;git push --force&#x27;</span><br><span class="line">alias gpoat=&#x27;git push origin --all &amp;&amp; git push origin --tags&#x27;</span><br><span class="line">compdef _git gpoat=git-push</span><br><span class="line">alias gpu=&#x27;git push upstream&#x27;</span><br><span class="line">alias gpv=&#x27;git push -v&#x27;</span><br><span class="line"></span><br><span class="line">alias gr=&#x27;git remote&#x27;</span><br><span class="line">alias gra=&#x27;git remote add&#x27;</span><br><span class="line">alias grb=&#x27;git rebase&#x27;</span><br><span class="line">alias grba=&#x27;git rebase --abort&#x27;</span><br><span class="line">alias grbc=&#x27;git rebase --continue&#x27;</span><br><span class="line">alias grbd=&#x27;git rebase develop&#x27;</span><br><span class="line">alias grbi=&#x27;git rebase -i&#x27;</span><br><span class="line">alias grbm=&#x27;git rebase master&#x27;</span><br><span class="line">alias grbs=&#x27;git rebase --skip&#x27;</span><br><span class="line">alias grh=&#x27;git reset&#x27;</span><br><span class="line">alias grhh=&#x27;git reset --hard&#x27;</span><br><span class="line">alias grm=&#x27;git rm&#x27;</span><br><span class="line">alias grmc=&#x27;git rm --cached&#x27;</span><br><span class="line">alias grmv=&#x27;git remote rename&#x27;</span><br><span class="line">alias grrm=&#x27;git remote remove&#x27;</span><br><span class="line">alias grset=&#x27;git remote set-url&#x27;</span><br><span class="line">alias grt=&#x27;cd $(git rev-parse --show-toplevel || echo &quot;.&quot;)&#x27;</span><br><span class="line">alias gru=&#x27;git reset --&#x27;</span><br><span class="line">alias grup=&#x27;git remote update&#x27;</span><br><span class="line">alias grv=&#x27;git remote -v&#x27;</span><br><span class="line"></span><br><span class="line">alias gsb=&#x27;git status -sb&#x27;</span><br><span class="line">alias gsd=&#x27;git svn dcommit&#x27;</span><br><span class="line">alias gsh=&#x27;git show&#x27;</span><br><span class="line">alias gsi=&#x27;git submodule init&#x27;</span><br><span class="line">alias gsps=&#x27;git show --pretty=short --show-signature&#x27;</span><br><span class="line">alias gsr=&#x27;git svn rebase&#x27;</span><br><span class="line">alias gss=&#x27;git status -s&#x27;</span><br><span class="line">alias gst=&#x27;git status&#x27;</span><br><span class="line">alias gsta=&#x27;git stash save&#x27;</span><br><span class="line">alias gstaa=&#x27;git stash apply&#x27;</span><br><span class="line">alias gstc=&#x27;git stash clear&#x27;</span><br><span class="line">alias gstd=&#x27;git stash drop&#x27;</span><br><span class="line">alias gstl=&#x27;git stash list&#x27;</span><br><span class="line">alias gstp=&#x27;git stash pop&#x27;</span><br><span class="line">alias gsts=&#x27;git stash show --text&#x27;</span><br><span class="line">alias gstall=&#x27;git stash --all&#x27;</span><br><span class="line">alias gsu=&#x27;git submodule update&#x27;</span><br><span class="line"></span><br><span class="line">alias gts=&#x27;git tag -s&#x27;</span><br><span class="line">alias gtv=&#x27;git tag | sort -V&#x27;</span><br><span class="line"></span><br><span class="line">alias gunignore=&#x27;git update-index --no-assume-unchanged&#x27;</span><br><span class="line">alias gunwip=&#x27;git log -n 1 | grep -q -c &quot;\-\-wip\-\-&quot; &amp;&amp; git reset HEAD~1&#x27;</span><br><span class="line">alias gup=&#x27;git pull --rebase&#x27;</span><br><span class="line">alias gupv=&#x27;git pull --rebase -v&#x27;</span><br><span class="line">alias gupa=&#x27;git pull --rebase --autostash&#x27;</span><br><span class="line">alias gupav=&#x27;git pull --rebase --autostash -v&#x27;</span><br><span class="line">alias glum=&#x27;git pull upstream master&#x27;</span><br><span class="line"></span><br><span class="line">alias gwch=&#x27;git whatchanged -p --abbrev-commit --pretty=medium&#x27;</span><br><span class="line">alias gwip=&#x27;git add -A; git rm $(git ls-files --deleted) 2&gt; /dev/null; git commit --no-verify -m &quot;--wip-- [skip ci]&quot;&#x27;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在&lt;code&gt;oh-my-zsh&lt;/code&gt;中&lt;code&gt;plugins&lt;/code&gt;的&lt;code&gt;git&lt;/code&gt;的快捷键,仅供记录查询&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plaintex</summary>
      
    
    
    
    
    <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>ng、vue、react</title>
    <link href="http://yoursite.com/2018/11/19/ng%E3%80%81vue%E3%80%81react/"/>
    <id>http://yoursite.com/2018/11/19/ng%E3%80%81vue%E3%80%81react/</id>
    <published>2018-11-19T10:24:47.000Z</published>
    <updated>2021-02-08T07:55:09.019Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Ng 脏值检查</li><li>Vue 数据劫持</li></ol><p>脏值检查(angular.js实现双向绑定的基本原理):</p><blockquote><p>无法检测数据是否发生改变,必须通过一些特定的条件,在条件执行的时候,进行检测,如果数据改变,就执行更新方法</p></blockquote><p>例子:要检测公交车上的人数是否发生变化?</p><ol><li>setInterval</li><li>在公交车关门时,就可以检测在公交车上的人数是否发生变化</li></ol><p>数据劫持:(Object.defineProperty)</p><p>???</p><p>观察者模式(发布订阅模式)<br>例子:</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;Ng 脏值检查&lt;/li&gt;
&lt;li&gt;Vue 数据劫持&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;脏值检查(angular.js实现双向绑定的基本原理):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无法检测数据是否发生改变,必须通过一些特定的条件,在条件执行的时候,进行检测,如果数</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序CSS命名规范</title>
    <link href="http://yoursite.com/2018/05/17/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8FCSS%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2018/05/17/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8FCSS%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</id>
    <published>2018-05-17T03:18:36.000Z</published>
    <updated>2021-02-08T07:55:09.053Z</updated>
    
    <content type="html"><![CDATA[<h4 id="微信小程序CSS命名示例"><a href="#微信小程序CSS命名示例" class="headerlink" title="微信小程序CSS命名示例"></a>微信小程序CSS命名示例</h4><blockquote><p>小程序CSS命名方式尽量使用 BEM 命名 , Block+Element+Modify.</p></blockquote><p>例如:<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;view__container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">class</span>=<span class="string">&quot;view__container__icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">icon</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;view__container__text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="BEM规范"><a href="#BEM规范" class="headerlink" title="BEM规范"></a>BEM规范</h4><blockquote><p>BEM 即(block,element,modifier)的命名方式</p></blockquote><p>如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-   中划线 ：仅作为连字符使用，表示某个块或者某个子元素的多单词之间的连接记号。</span><br><span class="line">__  双下划线：双下划线用来连接块和块的子元素</span><br><span class="line">_   单下划线：单下划线用来描述一个块或者块的子元素的一种状态</span><br><span class="line">type-block__element_modifier</span><br></pre></td></tr></table></figure><h5 id="B-block-块"><a href="#B-block-块" class="headerlink" title="B (block) 块"></a>B (block) 块</h5><blockquote><p>就是一个块级元素,类似于树的顶层,可以根据具体的页面内容的容器来分,或者根据页面来分</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">可以把上述结构分解成2种</span><br><span class="line">1. html作为此页面的块级元素</span><br><span class="line">2. div标签作为p标签和span标签的块级元素</span><br><span class="line"></span><br><span class="line">一个块是设计或布局的一部分，它有具体且唯一地意义 ，要么是语义上的要么是视觉上的。</span><br><span class="line">不过一般我个人并不会以第一种方式来分页面的结构.</span><br><span class="line">我们可以在这个页面给html定义一个标识,如A(为此页面所有块级元素的前缀)</span><br><span class="line">则div的类名可以为A-wrapper</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;A-wrapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">或</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个块的正式（实际上是半正式的）定义有下面三个基本原则：</p><ol><li>CSS中只能使用类名（不能是ID）。</li><li>每一个块名应该有一个命名空间（前缀）</li><li>每一条CSS规则必须属于一个块。</li></ol><p>如上,css选择器则可为:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span>&#123;&#125;</span><br><span class="line"><span class="comment">/*或*/</span></span><br><span class="line"><span class="selector-class">.A-wrapper</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="E-element-元素"><a href="#E-element-元素" class="headerlink" title="E (element) 元素"></a>E (element) 元素</h5><blockquote><p>块中的子元素是块的子元素，并且子元素的子元素在 bem 里也被认为是块的直接子元素。一个块中元素的类名必须用父级块的名称作为前缀。</p></blockquote><p>如上例子,<code>wrapper.text</code> 是上述p标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-class">.text</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.wrapper__text</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="M-modifier-修饰符"><a href="#M-modifier-修饰符" class="headerlink" title="M (modifier) 修饰符"></a>M (modifier) 修饰符</h5><blockquote><p>一个“修饰符”可以理解为一个块的特定状态，标识着它持有一个特定的属性。</p></blockquote><ul><li>用一个例子来解释最好不过了。一个表示按钮的块默认有三个大小：小，中，大。为了避免创建三个不同的块，最好是在块上加修饰符。这个修饰符应该有个名字（比如：size ）和值（ small，normal 或者 big ）。</li><li>如上面的例子中，表示一个选中的列表，和一个激活的列表项</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span><span class="selector-class">.active</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-class">.text</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-class">.text</span><span class="selector-class">.active</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.wrapper_active</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.wrapper__text</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.wrapper__text_active</span>&#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;微信小程序CSS命名示例&quot;&gt;&lt;a href=&quot;#微信小程序CSS命名示例&quot; class=&quot;headerlink&quot; title=&quot;微信小程序CSS命名示例&quot;&gt;&lt;/a&gt;微信小程序CSS命名示例&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;小程序CSS命名方式尽量使用 BE</summary>
      
    
    
    
    
    <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Cookie、Session、LocalStorage</title>
    <link href="http://yoursite.com/2018/02/24/Cookie%E3%80%81Seesion%E3%80%81LocalStorage/"/>
    <id>http://yoursite.com/2018/02/24/Cookie%E3%80%81Seesion%E3%80%81LocalStorage/</id>
    <published>2018-02-24T08:18:32.000Z</published>
    <updated>2021-03-09T05:26:36.586Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是一篇关于Cookie和Session还有LocalStorage和SessionStorage的总结的博客。<br>demo展示在:<a href="https://github.com/o0Chivas0o/demo/tree/master/node-demo/sign-up-demo">https://github.com/o0Chivas0o/demo/tree/master/node-demo/sign-up-demo</a>      功能做的不是很完善,但是能帮助理解Cookie以及Session。</p></blockquote><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p><code>Cookie</code> 有几个特点,</p><ol><li>服务端通过<code>Set-Cookie</code>来设置Cookie,Cookie的本质就是一串字符串。</li><li>客户端得到这个字符串后，每次登陆这个网页，都会携带上这串字符串。</li><li>服务端再通过这串字符串去找到对应的隐私信息。</li><li>Cookie大小一般为4kb。</li><li>Cookie默认有失效时间，但是后台可以设置过期时间。</li></ol><p>因为<code>Cookie</code>可以篡改，而且是明文传输的，所以存在漏洞，<code>Session</code>就解决了这个问题。  </p><h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><p><code>Session</code>的特点，</p><ol><li>一般来说，Session是基于Cookie来设置的一个哈希表。</li><li>将SessionId(随机数)通过Cookie发给服务端。</li><li>客户端访问服务器时，服务器读取SessionID。</li><li>服务器有一块内存(哈希表),存储了所有的Session。</li><li>通过SessionID，我们可以得到用户的隐私信息。</li><li>这块内存(哈希表)就是服务器上所有的Session。  </li></ol><h4 id="LocalStorage"><a href="#LocalStorage" class="headerlink" title="LocalStorage"></a>LocalStorage</h4><p><code>LocalStorage</code>的实质也是一个<code>hash</code>，它是html5标准提供的一个API，用来持久化存储一些不是那么重要的信息。  </p><p>它的特点,</p><ol><li>LocalStorage与HTTP无关。</li><li>HTTP不会带上LocalStorage。</li><li>只有相同的页面才能互相读取LocalStorage。</li><li>浏览器对每个域名分配的LocalStorage最大的存储量为5Mb左右。</li><li>记录一些无关紧要的信息，不记录用户敏感信息。</li><li>LocalStorage永久有效，除非用户清理缓存。  </li></ol><p>它与Cookie的区别就是，一个通过<code>Set-Cookie</code>设置，一个是HTML5提供的APi，<br>一个是通过HTTP设置，一个与HTTP无关。</p><h4 id="SessionStorage-会话窗口"><a href="#SessionStorage-会话窗口" class="headerlink" title="SessionStorage(会话窗口)"></a>SessionStorage(会话窗口)</h4><p><code>SessionStorage</code>与<code>Session</code>无关，同样，它也是浏览器提供的一个API。</p><p>它与<code>LocalStorage</code>一样,只有一点不一样，就是它的存储时间在用户关闭页面之后就会失效。</p><h4 id="cache-control-缓存管理"><a href="#cache-control-缓存管理" class="headerlink" title="cache-control(缓存管理)"></a>cache-control(缓存管理)</h4><p>可以通过在服务器设置<code>Cache-Control</code>来设置缓存时间，从而提高网页加载速度，提供更好的用户体验。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这是一篇关于Cookie和Session还有LocalStorage和SessionStorage的总结的博客。&lt;br&gt;demo展示在:&lt;a href=&quot;https://github.com/o0Chivas0o/demo/tree/master/</summary>
      
    
    
    
    <category term="Web" scheme="http://yoursite.com/category/Web/"/>
    
    
    <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>JS要点整理</title>
    <link href="http://yoursite.com/2018/02/09/JS%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2018/02/09/JS%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/</id>
    <published>2018-02-09T07:15:50.000Z</published>
    <updated>2021-02-08T07:55:09.117Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于近期学习的东西比较多，JS这一块的要点尤其多，而且杂，出于方便自己记忆和理解的原因，所以写下这篇总结，包括JS面试一些出现频率较高的知识点，我会在后期的学习不断更新这篇博客。</p></blockquote><h3 id="JS7种数据类型"><a href="#JS7种数据类型" class="headerlink" title="JS7种数据类型"></a>JS7种数据类型</h3><h4 id="简单类型"><a href="#简单类型" class="headerlink" title="简单类型"></a>简单类型</h4><p>null、undefined、string、number、boolean、symbol  </p><h4 id="复杂类型"><a href="#复杂类型" class="headerlink" title="复杂类型"></a>复杂类型</h4><p>object  </p><p>详见我的博客:<a href="https://o0chivas0o.github.io/2018/01/03/JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/">JS数据类型</a>  </p><h3 id="JS中的类型转换"><a href="#JS中的类型转换" class="headerlink" title="JS中的类型转换"></a>JS中的类型转换</h3><p>博客:<a href="https://o0chivas0o.github.io/2018/01/04/JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E4%BA%8C/">JS数据类型-二</a>  </p><p>博客中提到三种类型之间的互相转换，忘记的时候可以翻阅。  </p><h3 id="JS函数"><a href="#JS函数" class="headerlink" title="JS函数"></a>JS函数</h3><h3 id="JS数组"><a href="#JS数组" class="headerlink" title="JS数组"></a>JS数组</h3><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包总是和立即执行函数一起出现，立即执行函数是为了解决在命名变量时不使用全局变量，而闭包的精髓就是这个函数引用到了函数之外的变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">0</span> <span class="comment">// 1</span></span><br><span class="line">  <span class="built_in">window</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">return</span> a++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>上述代码中 1 和 2 组成了一个闭包 这时用户可以使用 add()函数操作a，却不能直接访问到a变量，因为a在一个立即执行函数中。  </p><h3 id="原型、继承、new"><a href="#原型、继承、new" class="headerlink" title="原型、继承、new"></a>原型、继承、new</h3><h4 id="new的作用"><a href="#new的作用" class="headerlink" title="new的作用"></a>new的作用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params"></span>)</span>&#123;  <span class="comment">// 原型</span></span><br><span class="line">  walk = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;walk&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  talk = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;talk&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> human = <span class="keyword">new</span> Human(&#123;<span class="attr">name</span>:<span class="string">&#x27;lee&#x27;</span>,<span class="attr">city</span>:<span class="string">&#x27;wuhan&#x27;</span>&#125;)</span><br><span class="line"><span class="comment">// 这个过程</span></span><br><span class="line"><span class="comment">// function Human()&#123;</span></span><br><span class="line"><span class="comment">// var temp = &#123;&#125; 1</span></span><br><span class="line"><span class="comment">// this = temp   2</span></span><br><span class="line"><span class="comment">// this.__proto__ = Human.prototype 3</span></span><br><span class="line"><span class="comment">// this.name = &#x27;lee&#x27;</span></span><br><span class="line"><span class="comment">// this.city = &#x27;wuhan&#x27;</span></span><br><span class="line"><span class="comment">// return temp  4</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>上述代码中 1 2 3 4 就是new的过程<br>声明一个临时对象,将this指向临时对象,将临时对象的__proto__(原型链) 指向 原型的prototype(共有属性),返回这个临时对象<br>而其实中<code>this.name</code>和<code>this.city</code>就是这个new出来的对象的私有属性。</p><h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><p>AJAX实际上只有4行代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = xmlHttpRequest()</span><br><span class="line">xhr.open(<span class="string">&#x27;/xxx&#x27;</span>,<span class="string">&#x27;post&#x27;</span>,<span class="literal">true</span>) <span class="comment">// 3个参数 url method boolean(是否异步)默认为true</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;  <span class="comment">// 请求是否加载完毕</span></span><br><span class="line">    <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>)&#123;  <span class="comment">// 判断响应状态是否成功</span></span><br><span class="line">      successfn.call(<span class="literal">undefined</span>,xhr.responseText) <span class="comment">// 成功就调用successFn(这是一个回调函数)</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(xhr.status &gt;= <span class="number">400</span>)&#123;     <span class="comment">// 失败状态</span></span><br><span class="line">      failFn.call(<span class="literal">undefined</span>,xhr.status) <span class="comment">// 调用failFn(同样是一个回调函数)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send()</span><br></pre></td></tr></table></figure><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;由于近期学习的东西比较多，JS这一块的要点尤其多，而且杂，出于方便自己记忆和理解的原因，所以写下这篇总结，包括JS面试一些出现频率较高的知识点，我会在后期的学习不断更新这篇博客。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;JS7种数据类型</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
